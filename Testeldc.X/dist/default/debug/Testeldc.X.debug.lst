

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu May 29 10:51:16 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    18   000000                     
    19                           ; Generated 17/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4550 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53   000FE0                     bsr             equ	4064
    54   000FE9                     fsr0            equ	4073
    55   000FEA                     fsr0h           equ	4074
    56   000FE9                     fsr0l           equ	4073
    57   000FE1                     fsr1            equ	4065
    58   000FE2                     fsr1h           equ	4066
    59   000FE1                     fsr1l           equ	4065
    60   000FD9                     fsr2            equ	4057
    61   000FDA                     fsr2h           equ	4058
    62   000FD9                     fsr2l           equ	4057
    63   000FEF                     indf0           equ	4079
    64   000FE7                     indf1           equ	4071
    65   000FDF                     indf2           equ	4063
    66   000FF2                     intcon          equ	4082
    67   000000                     nvmcon          equ	0
    68   000FF9                     pcl             equ	4089
    69   000FFA                     pclath          equ	4090
    70   000FFB                     pclatu          equ	4091
    71   000FEB                     plusw0          equ	4075
    72   000FE3                     plusw1          equ	4067
    73   000FDB                     plusw2          equ	4059
    74   000FED                     postdec0        equ	4077
    75   000FE5                     postdec1        equ	4069
    76   000FDD                     postdec2        equ	4061
    77   000FEE                     postinc0        equ	4078
    78   000FE6                     postinc1        equ	4070
    79   000FDE                     postinc2        equ	4062
    80   000FEC                     preinc0         equ	4076
    81   000FE4                     preinc1         equ	4068
    82   000FDC                     preinc2         equ	4060
    83   000FF3                     prod            equ	4083
    84   000FF4                     prodh           equ	4084
    85   000FF3                     prodl           equ	4083
    86   000FD8                     status          equ	4056
    87   000FF5                     tablat          equ	4085
    88   000FF6                     tblptr          equ	4086
    89   000FF7                     tblptrh         equ	4087
    90   000FF6                     tblptrl         equ	4086
    91   000FF8                     tblptru         equ	4088
    92   000FFD                     tosl            equ	4093
    93   000FE8                     wreg            equ	4072
    94   000F62                     SPPDATA         equ	3938	;# 
    95   000F63                     SPPCFG          equ	3939	;# 
    96   000F64                     SPPEPS          equ	3940	;# 
    97   000F65                     SPPCON          equ	3941	;# 
    98   000F66                     UFRM            equ	3942	;# 
    99   000F66                     UFRML           equ	3942	;# 
   100   000F67                     UFRMH           equ	3943	;# 
   101   000F68                     UIR             equ	3944	;# 
   102   000F69                     UIE             equ	3945	;# 
   103   000F6A                     UEIR            equ	3946	;# 
   104   000F6B                     UEIE            equ	3947	;# 
   105   000F6C                     USTAT           equ	3948	;# 
   106   000F6D                     UCON            equ	3949	;# 
   107   000F6E                     UADDR           equ	3950	;# 
   108   000F6F                     UCFG            equ	3951	;# 
   109   000F70                     UEP0            equ	3952	;# 
   110   000F71                     UEP1            equ	3953	;# 
   111   000F72                     UEP2            equ	3954	;# 
   112   000F73                     UEP3            equ	3955	;# 
   113   000F74                     UEP4            equ	3956	;# 
   114   000F75                     UEP5            equ	3957	;# 
   115   000F76                     UEP6            equ	3958	;# 
   116   000F77                     UEP7            equ	3959	;# 
   117   000F78                     UEP8            equ	3960	;# 
   118   000F79                     UEP9            equ	3961	;# 
   119   000F7A                     UEP10           equ	3962	;# 
   120   000F7B                     UEP11           equ	3963	;# 
   121   000F7C                     UEP12           equ	3964	;# 
   122   000F7D                     UEP13           equ	3965	;# 
   123   000F7E                     UEP14           equ	3966	;# 
   124   000F7F                     UEP15           equ	3967	;# 
   125   000F80                     PORTA           equ	3968	;# 
   126   000F81                     PORTB           equ	3969	;# 
   127   000F82                     PORTC           equ	3970	;# 
   128   000F83                     PORTD           equ	3971	;# 
   129   000F84                     PORTE           equ	3972	;# 
   130   000F89                     LATA            equ	3977	;# 
   131   000F8A                     LATB            equ	3978	;# 
   132   000F8B                     LATC            equ	3979	;# 
   133   000F8C                     LATD            equ	3980	;# 
   134   000F8D                     LATE            equ	3981	;# 
   135   000F92                     TRISA           equ	3986	;# 
   136   000F92                     DDRA            equ	3986	;# 
   137   000F93                     TRISB           equ	3987	;# 
   138   000F93                     DDRB            equ	3987	;# 
   139   000F94                     TRISC           equ	3988	;# 
   140   000F94                     DDRC            equ	3988	;# 
   141   000F95                     TRISD           equ	3989	;# 
   142   000F95                     DDRD            equ	3989	;# 
   143   000F96                     TRISE           equ	3990	;# 
   144   000F96                     DDRE            equ	3990	;# 
   145   000F9B                     OSCTUNE         equ	3995	;# 
   146   000F9D                     PIE1            equ	3997	;# 
   147   000F9E                     PIR1            equ	3998	;# 
   148   000F9F                     IPR1            equ	3999	;# 
   149   000FA0                     PIE2            equ	4000	;# 
   150   000FA1                     PIR2            equ	4001	;# 
   151   000FA2                     IPR2            equ	4002	;# 
   152   000FA6                     EECON1          equ	4006	;# 
   153   000FA7                     EECON2          equ	4007	;# 
   154   000FA8                     EEDATA          equ	4008	;# 
   155   000FA9                     EEADR           equ	4009	;# 
   156   000FAB                     RCSTA           equ	4011	;# 
   157   000FAB                     RCSTA1          equ	4011	;# 
   158   000FAC                     TXSTA           equ	4012	;# 
   159   000FAC                     TXSTA1          equ	4012	;# 
   160   000FAD                     TXREG           equ	4013	;# 
   161   000FAD                     TXREG1          equ	4013	;# 
   162   000FAE                     RCREG           equ	4014	;# 
   163   000FAE                     RCREG1          equ	4014	;# 
   164   000FAF                     SPBRG           equ	4015	;# 
   165   000FAF                     SPBRG1          equ	4015	;# 
   166   000FB0                     SPBRGH          equ	4016	;# 
   167   000FB1                     T3CON           equ	4017	;# 
   168   000FB2                     TMR3            equ	4018	;# 
   169   000FB2                     TMR3L           equ	4018	;# 
   170   000FB3                     TMR3H           equ	4019	;# 
   171   000FB4                     CMCON           equ	4020	;# 
   172   000FB5                     CVRCON          equ	4021	;# 
   173   000FB6                     ECCP1AS         equ	4022	;# 
   174   000FB6                     CCP1AS          equ	4022	;# 
   175   000FB7                     ECCP1DEL        equ	4023	;# 
   176   000FB7                     CCP1DEL         equ	4023	;# 
   177   000FB8                     BAUDCON         equ	4024	;# 
   178   000FB8                     BAUDCTL         equ	4024	;# 
   179   000FBA                     CCP2CON         equ	4026	;# 
   180   000FBB                     CCPR2           equ	4027	;# 
   181   000FBB                     CCPR2L          equ	4027	;# 
   182   000FBC                     CCPR2H          equ	4028	;# 
   183   000FBD                     CCP1CON         equ	4029	;# 
   184   000FBD                     ECCP1CON        equ	4029	;# 
   185   000FBE                     CCPR1           equ	4030	;# 
   186   000FBE                     CCPR1L          equ	4030	;# 
   187   000FBF                     CCPR1H          equ	4031	;# 
   188   000FC0                     ADCON2          equ	4032	;# 
   189   000FC1                     ADCON1          equ	4033	;# 
   190   000FC2                     ADCON0          equ	4034	;# 
   191   000FC3                     ADRES           equ	4035	;# 
   192   000FC3                     ADRESL          equ	4035	;# 
   193   000FC4                     ADRESH          equ	4036	;# 
   194   000FC5                     SSPCON2         equ	4037	;# 
   195   000FC6                     SSPCON1         equ	4038	;# 
   196   000FC7                     SSPSTAT         equ	4039	;# 
   197   000FC8                     SSPADD          equ	4040	;# 
   198   000FC9                     SSPBUF          equ	4041	;# 
   199   000FCA                     T2CON           equ	4042	;# 
   200   000FCB                     PR2             equ	4043	;# 
   201   000FCB                     MEMCON          equ	4043	;# 
   202   000FCC                     TMR2            equ	4044	;# 
   203   000FCD                     T1CON           equ	4045	;# 
   204   000FCE                     TMR1            equ	4046	;# 
   205   000FCE                     TMR1L           equ	4046	;# 
   206   000FCF                     TMR1H           equ	4047	;# 
   207   000FD0                     RCON            equ	4048	;# 
   208   000FD1                     WDTCON          equ	4049	;# 
   209   000FD2                     HLVDCON         equ	4050	;# 
   210   000FD2                     LVDCON          equ	4050	;# 
   211   000FD3                     OSCCON          equ	4051	;# 
   212   000FD5                     T0CON           equ	4053	;# 
   213   000FD6                     TMR0            equ	4054	;# 
   214   000FD6                     TMR0L           equ	4054	;# 
   215   000FD7                     TMR0H           equ	4055	;# 
   216   000FD8                     STATUS          equ	4056	;# 
   217   000FD9                     FSR2            equ	4057	;# 
   218   000FD9                     FSR2L           equ	4057	;# 
   219   000FDA                     FSR2H           equ	4058	;# 
   220   000FDB                     PLUSW2          equ	4059	;# 
   221   000FDC                     PREINC2         equ	4060	;# 
   222   000FDD                     POSTDEC2        equ	4061	;# 
   223   000FDE                     POSTINC2        equ	4062	;# 
   224   000FDF                     INDF2           equ	4063	;# 
   225   000FE0                     BSR             equ	4064	;# 
   226   000FE1                     FSR1            equ	4065	;# 
   227   000FE1                     FSR1L           equ	4065	;# 
   228   000FE2                     FSR1H           equ	4066	;# 
   229   000FE3                     PLUSW1          equ	4067	;# 
   230   000FE4                     PREINC1         equ	4068	;# 
   231   000FE5                     POSTDEC1        equ	4069	;# 
   232   000FE6                     POSTINC1        equ	4070	;# 
   233   000FE7                     INDF1           equ	4071	;# 
   234   000FE8                     WREG            equ	4072	;# 
   235   000FE9                     FSR0            equ	4073	;# 
   236   000FE9                     FSR0L           equ	4073	;# 
   237   000FEA                     FSR0H           equ	4074	;# 
   238   000FEB                     PLUSW0          equ	4075	;# 
   239   000FEC                     PREINC0         equ	4076	;# 
   240   000FED                     POSTDEC0        equ	4077	;# 
   241   000FEE                     POSTINC0        equ	4078	;# 
   242   000FEF                     INDF0           equ	4079	;# 
   243   000FF0                     INTCON3         equ	4080	;# 
   244   000FF1                     INTCON2         equ	4081	;# 
   245   000FF2                     INTCON          equ	4082	;# 
   246   000FF3                     PROD            equ	4083	;# 
   247   000FF3                     PRODL           equ	4083	;# 
   248   000FF4                     PRODH           equ	4084	;# 
   249   000FF5                     TABLAT          equ	4085	;# 
   250   000FF6                     TBLPTR          equ	4086	;# 
   251   000FF6                     TBLPTRL         equ	4086	;# 
   252   000FF7                     TBLPTRH         equ	4087	;# 
   253   000FF8                     TBLPTRU         equ	4088	;# 
   254   000FF9                     PCLAT           equ	4089	;# 
   255   000FF9                     PC              equ	4089	;# 
   256   000FF9                     PCL             equ	4089	;# 
   257   000FFA                     PCLATH          equ	4090	;# 
   258   000FFB                     PCLATU          equ	4091	;# 
   259   000FFC                     STKPTR          equ	4092	;# 
   260   000FFD                     TOS             equ	4093	;# 
   261   000FFD                     TOSL            equ	4093	;# 
   262   000FFE                     TOSH            equ	4094	;# 
   263   000FFF                     TOSU            equ	4095	;# 
   264                           
   265                           	psect	smallconst
   266   000800                     __psmallconst:
   267                           	callstack 0
   268   000800  00                 	db	0
   269   000801                     LCD_Init@init_seq:
   270                           	callstack 0
   271   000801  38                 	db	56
   272   000802  38                 	db	56
   273   000803  38                 	db	56
   274   000804  0C                 	db	12
   275   000805  06                 	db	6
   276   000806  01                 	db	1
   277   000807                     __end_ofLCD_Init@init_seq:
   278                           	callstack 0
   279   000807                     LCD_SetCursor@row_offsets:
   280                           	callstack 0
   281   000807  80                 	db	128
   282   000808  C0                 	db	192
   283   000809  90                 	db	144
   284   00080A  D0                 	db	208
   285   00080B                     __end_ofLCD_SetCursor@row_offsets:
   286                           	callstack 0
   287   000F96                     _TRISE          set	3990
   288   000F95                     _TRISD          set	3989
   289   000F84                     _PORTE          set	3972
   290   000F83                     _PORTD          set	3971
   291   000F84                     _PORTEbits      set	3972
   292   000FC1                     _ADCON1         set	4033
   293   00080B                     STR_1:
   294   00080B  70                 	db	112	;'p'
   295   00080C  61                 	db	97	;'a'
   296   00080D  62                 	db	98	;'b'
   297   00080E  6C                 	db	108	;'l'
   298   00080F  6F                 	db	111	;'o'
   299   000810  00                 	db	0
   300   000811  00                 	db	0	; dummy byte at the end
   301   000800                     __smallconst    set	__psmallconst
   302   000800                     __mediumconst   set	__psmallconst
   303   000001                     __activetblptr  equ	1
   304                           
   305                           ; #config settings
   306                           
   307                           	psect	cinit
   308   000940                     __pcinit:
   309                           	callstack 0
   310   000940                     start_initialization:
   311                           	callstack 0
   312   000940                     __initialization:
   313                           	callstack 0
   314   000940                     end_of_initialization:
   315                           	callstack 0
   316   000940                     __end_of__initialization:
   317                           	callstack 0
   318   000940  0E00               	movlw	low (__Lsmallconst shr (0+16))
   319   000942  6EF8               	movwf	tblptru,c
   320   000944  0E08               	movlw	high __Lsmallconst
   321   000946  6EF7               	movwf	tblptrh,c
   322   000948  0100               	movlb	0
   323   00094A  EF8F  F004         	goto	_main	;jump to C main() function
   324                           
   325                           	psect	cstackCOMRAM
   326   000001                     __pcstackCOMRAM:
   327                           	callstack 0
   328   000001                     ??_LCD_Command:
   329   000001                     ??_LCD_WriteChar:
   330                           
   331                           ; 1 bytes @ 0x0
   332   000001                     	ds	1
   333   000002                     LCD_Command@cmd:
   334                           	callstack 0
   335   000002                     LCD_WriteChar@data:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0x1
   339   000002                     	ds	1
   340   000003                     LCD_SetCursor@col:
   341                           	callstack 0
   342   000003                     LCD_WriteString@str:
   343                           	callstack 0
   344   000003                     ??_LCD_Init:
   345                           
   346                           ; 1 bytes @ 0x2
   347   000003                     	ds	1
   348   000004                     LCD_Init@i:
   349                           	callstack 0
   350   000004                     ??_LCD_SetCursor:
   351   000004                     
   352                           ; 1 bytes @ 0x3
   353   000004                     	ds	3
   354   000007                     LCD_SetCursor@row:
   355                           	callstack 0
   356                           
   357                           ; 1 bytes @ 0x6
   358   000007                     	ds	1
   359   000008                     
   360                           ; 1 bytes @ 0x7
   361 ;;
   362 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   363 ;;
   364 ;; *************** function _main *****************
   365 ;; Defined at:
   366 ;;		line 9 in file "main.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;		None
   369 ;; Auto vars:     Size  Location     Type
   370 ;;		None
   371 ;; Return value:  Size  Location     Type
   372 ;;                  1    wreg      void 
   373 ;; Registers used:
   374 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   375 ;; Tracked objects:
   376 ;;		On entry : 0/0
   377 ;;		On exit  : 0/0
   378 ;;		Unchanged: 0/0
   379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   380 ;;      Params:         0       0       0       0       0       0       0       0       0
   381 ;;      Locals:         0       0       0       0       0       0       0       0       0
   382 ;;      Temps:          0       0       0       0       0       0       0       0       0
   383 ;;      Totals:         0       0       0       0       0       0       0       0       0
   384 ;;Total ram usage:        0 bytes
   385 ;; Hardware stack levels required when called: 2
   386 ;; This function calls:
   387 ;;		_LCD_Init
   388 ;;		_LCD_SetCursor
   389 ;;		_LCD_WriteString
   390 ;;		_init_ports
   391 ;; This function is called by:
   392 ;;		Startup code after reset
   393 ;; This function uses a non-reentrant model
   394 ;;
   395                           
   396                           	psect	text0
   397   00091E                     __ptext0:
   398                           	callstack 0
   399   00091E                     _main:
   400                           	callstack 29
   401   00091E                     
   402                           ;main.c: 10:     init_ports();
   403   00091E  ECA7  F004         	call	_init_ports	;wreg free
   404   000922                     
   405                           ;main.c: 12:     LCD_Init();
   406   000922  EC09  F004         	call	_LCD_Init	;wreg free
   407   000926                     
   408                           ;main.c: 13:     LCD_SetCursor(1, 2);
   409   000926  0E02               	movlw	2
   410   000928  6E03               	movwf	LCD_SetCursor@col^0,c
   411   00092A  0E01               	movlw	1
   412   00092C  EC2D  F004         	call	_LCD_SetCursor
   413   000930                     
   414                           ;main.c: 14:     LCD_WriteString("pablo");
   415   000930  0E0B               	movlw	low STR_1
   416   000932  6E03               	movwf	LCD_WriteString@str^0,c
   417   000934  EC4F  F004         	call	_LCD_WriteString	;wreg free
   418   000938                     l46:
   419   000938  EF9C  F004         	goto	l46
   420   00093C  EF9E  F03E         	goto	start
   421   000940                     __end_of_main:
   422                           	callstack 0
   423                           
   424 ;; *************** function _init_ports *****************
   425 ;; Defined at:
   426 ;;		line 22 in file "main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;		None
   431 ;; Return value:  Size  Location     Type
   432 ;;                  1    wreg      void 
   433 ;; Registers used:
   434 ;;		None
   435 ;; Tracked objects:
   436 ;;		On entry : 0/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   440 ;;      Params:         0       0       0       0       0       0       0       0       0
   441 ;;      Locals:         0       0       0       0       0       0       0       0       0
   442 ;;      Temps:          0       0       0       0       0       0       0       0       0
   443 ;;      Totals:         0       0       0       0       0       0       0       0       0
   444 ;;Total ram usage:        0 bytes
   445 ;; Hardware stack levels used: 1
   446 ;; This function calls:
   447 ;;		Nothing
   448 ;; This function is called by:
   449 ;;		_main
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           	psect	text1
   454   00094E                     __ptext1:
   455                           	callstack 0
   456   00094E                     _init_ports:
   457                           	callstack 30
   458   00094E                     
   459                           ;main.c: 23:     TRISD = 0x00;
   460   00094E  6A95               	clrf	149,c	;volatile
   461                           
   462                           ;main.c: 24:     TRISE = 0x00;
   463   000950  6A96               	clrf	150,c	;volatile
   464                           
   465                           ;main.c: 25:     PORTD = 0x00;
   466   000952  6A83               	clrf	131,c	;volatile
   467                           
   468                           ;main.c: 26:     PORTE = 0x00;
   469   000954  6A84               	clrf	132,c	;volatile
   470   000956  0012               	return		;funcret
   471   000958                     __end_of_init_ports:
   472                           	callstack 0
   473                           
   474 ;; *************** function _LCD_WriteString *****************
   475 ;; Defined at:
   476 ;;		line 55 in file "./lcd.h"
   477 ;; Parameters:    Size  Location     Type
   478 ;;  str             1    2[COMRAM] PTR const unsigned char 
   479 ;;		 -> STR_1(6), 
   480 ;; Auto vars:     Size  Location     Type
   481 ;;		None
   482 ;; Return value:  Size  Location     Type
   483 ;;                  1    wreg      void 
   484 ;; Registers used:
   485 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   486 ;; Tracked objects:
   487 ;;		On entry : 0/0
   488 ;;		On exit  : 0/0
   489 ;;		Unchanged: 0/0
   490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   491 ;;      Params:         1       0       0       0       0       0       0       0       0
   492 ;;      Locals:         0       0       0       0       0       0       0       0       0
   493 ;;      Temps:          0       0       0       0       0       0       0       0       0
   494 ;;      Totals:         1       0       0       0       0       0       0       0       0
   495 ;;Total ram usage:        1 bytes
   496 ;; Hardware stack levels used: 1
   497 ;; Hardware stack levels required when called: 1
   498 ;; This function calls:
   499 ;;		_LCD_WriteChar
   500 ;; This function is called by:
   501 ;;		_main
   502 ;; This function uses a non-reentrant model
   503 ;;
   504                           
   505                           	psect	text2
   506   00089E                     __ptext2:
   507                           	callstack 0
   508   00089E                     _LCD_WriteString:
   509                           	callstack 29
   510   00089E                     
   511                           ;./lcd.h: 56:     while (*str) {
   512   00089E  EF58  F004         	goto	l812
   513   0008A2                     l808:
   514                           
   515                           ;./lcd.h: 57:         LCD_WriteChar(*str++);
   516   0008A2  C003  FFF6         	movff	LCD_WriteString@str,tblptrl
   517   0008A6                     	if	0	;There is only one active tblptr byte
   518   0008A6                     	endif
   519   0008A6                     	if	0	;tblptru may be non-zero
   520   0008A6                     	endif
   521   0008A6                     	if	0	;tblptru may be non-zero
   522   0008A6                     	endif
   523   0008A6  0008               	tblrd		*
   524   0008A8  50F5               	movf	tablat,w,c
   525   0008AA  EC65  F004         	call	_LCD_WriteChar
   526   0008AE  2A03               	incf	LCD_WriteString@str^0,f,c
   527   0008B0                     l812:
   528                           
   529                           ;./lcd.h: 56:     while (*str) {
   530   0008B0  C003  FFF6         	movff	LCD_WriteString@str,tblptrl
   531   0008B4                     	if	0	;There is only one active tblptr byte
   532   0008B4                     	endif
   533   0008B4                     	if	0	;tblptru may be non-zero
   534   0008B4                     	endif
   535   0008B4                     	if	0	;tblptru may be non-zero
   536   0008B4                     	endif
   537   0008B4  0008               	tblrd		*
   538   0008B6  50F5               	movf	tablat,w,c
   539   0008B8  0900               	iorlw	0
   540   0008BA  A4D8               	btfss	status,2,c
   541   0008BC  EF62  F004         	goto	u71
   542   0008C0  EF64  F004         	goto	u70
   543   0008C4                     u71:
   544   0008C4  EF51  F004         	goto	l808
   545   0008C8                     u70:
   546   0008C8  0012               	return		;funcret
   547   0008CA                     __end_of_LCD_WriteString:
   548                           	callstack 0
   549                           
   550 ;; *************** function _LCD_WriteChar *****************
   551 ;; Defined at:
   552 ;;		line 43 in file "./lcd.h"
   553 ;; Parameters:    Size  Location     Type
   554 ;;  data            1    wreg     unsigned char 
   555 ;; Auto vars:     Size  Location     Type
   556 ;;  data            1    1[COMRAM] unsigned char 
   557 ;; Return value:  Size  Location     Type
   558 ;;                  1    wreg      void 
   559 ;; Registers used:
   560 ;;		wreg
   561 ;; Tracked objects:
   562 ;;		On entry : 0/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   566 ;;      Params:         0       0       0       0       0       0       0       0       0
   567 ;;      Locals:         1       0       0       0       0       0       0       0       0
   568 ;;      Temps:          1       0       0       0       0       0       0       0       0
   569 ;;      Totals:         2       0       0       0       0       0       0       0       0
   570 ;;Total ram usage:        2 bytes
   571 ;; Hardware stack levels used: 1
   572 ;; This function calls:
   573 ;;		Nothing
   574 ;; This function is called by:
   575 ;;		_LCD_WriteString
   576 ;; This function uses a non-reentrant model
   577 ;;
   578                           
   579                           	psect	text3
   580   0008CA                     __ptext3:
   581                           	callstack 0
   582   0008CA                     _LCD_WriteChar:
   583                           	callstack 29
   584                           
   585                           ;incstack = 0
   586                           ;LCD_WriteChar@data stored from wreg
   587   0008CA  6E02               	movwf	LCD_WriteChar@data^0,c
   588   0008CC                     
   589                           ;./lcd.h: 44:     PORTEbits.RE0 = 1;
   590   0008CC  8084               	bsf	132,0,c	;volatile
   591   0008CE                     
   592                           ;./lcd.h: 45:     PORTD = data;
   593   0008CE  C002  FF83         	movff	LCD_WriteChar@data,3971	;volatile
   594   0008D2                     
   595                           ;./lcd.h: 46:     PORTEbits.RE1 = 1;
   596   0008D2  8284               	bsf	132,1,c	;volatile
   597   0008D4                     
   598                           ;./lcd.h: 47:     _delay((unsigned long)((2)*(4000000/4000.0)));
   599   0008D4  0E03               	movlw	3
   600   0008D6  6E01               	movwf	??_LCD_WriteChar^0,c
   601   0008D8  0E98               	movlw	152
   602   0008DA                     u87:
   603   0008DA  2EE8               	decfsz	wreg,f,c
   604   0008DC  D7FE               	bra	u87
   605   0008DE  2E01               	decfsz	??_LCD_WriteChar^0,f,c
   606   0008E0  D7FC               	bra	u87
   607   0008E2                     
   608                           ;./lcd.h: 48:     PORTEbits.RE1 = 0;
   609   0008E2  9284               	bcf	132,1,c	;volatile
   610   0008E4                     
   611                           ;./lcd.h: 49:     _delay((unsigned long)((2)*(4000000/4000.0)));
   612   0008E4  0E03               	movlw	3
   613   0008E6  6E01               	movwf	??_LCD_WriteChar^0,c
   614   0008E8  0E98               	movlw	152
   615   0008EA                     u97:
   616   0008EA  2EE8               	decfsz	wreg,f,c
   617   0008EC  D7FE               	bra	u97
   618   0008EE  2E01               	decfsz	??_LCD_WriteChar^0,f,c
   619   0008F0  D7FC               	bra	u97
   620   0008F2  0012               	return		;funcret
   621   0008F4                     __end_of_LCD_WriteChar:
   622                           	callstack 0
   623                           
   624 ;; *************** function _LCD_SetCursor *****************
   625 ;; Defined at:
   626 ;;		line 33 in file "./lcd.h"
   627 ;; Parameters:    Size  Location     Type
   628 ;;  row             1    wreg     unsigned char 
   629 ;;  col             1    2[COMRAM] unsigned char 
   630 ;; Auto vars:     Size  Location     Type
   631 ;;  row             1    6[COMRAM] unsigned char 
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   641 ;;      Params:         1       0       0       0       0       0       0       0       0
   642 ;;      Locals:         1       0       0       0       0       0       0       0       0
   643 ;;      Temps:          3       0       0       0       0       0       0       0       0
   644 ;;      Totals:         5       0       0       0       0       0       0       0       0
   645 ;;Total ram usage:        5 bytes
   646 ;; Hardware stack levels used: 1
   647 ;; Hardware stack levels required when called: 1
   648 ;; This function calls:
   649 ;;		_LCD_Command
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           	psect	text4
   656   00085A                     __ptext4:
   657                           	callstack 0
   658   00085A                     _LCD_SetCursor:
   659                           	callstack 29
   660                           
   661                           ;incstack = 0
   662                           ;LCD_SetCursor@row stored from wreg
   663   00085A  6E07               	movwf	LCD_SetCursor@row^0,c
   664   00085C                     
   665                           ;./lcd.h: 34:     static const unsigned char row_offsets[] = {0x80, 0xC0, 0x90, 0xD0};;.
      +                          /lcd.h: 35:     if (row >= 1 && row <= 4) {
   666   00085C  5007               	movf	LCD_SetCursor@row^0,w,c
   667   00085E  B4D8               	btfsc	status,2,c
   668   000860  EF34  F004         	goto	u51
   669   000864  EF36  F004         	goto	u50
   670   000868                     u51:
   671   000868  EF4E  F004         	goto	l25
   672   00086C                     u50:
   673   00086C  0E05               	movlw	5
   674   00086E  6007               	cpfslt	LCD_SetCursor@row^0,c
   675   000870  EF3C  F004         	goto	u61
   676   000874  EF3E  F004         	goto	u60
   677   000878                     u61:
   678   000878  EF4E  F004         	goto	l25
   679   00087C                     u60:
   680   00087C                     
   681                           ;./lcd.h: 36:         LCD_Command(row_offsets[row - 1] + (col - 1));
   682   00087C  C007  F004         	movff	LCD_SetCursor@row,??_LCD_SetCursor
   683   000880  0EFF               	movlw	255
   684   000882  2604               	addwf	??_LCD_SetCursor^0,f,c
   685   000884  5004               	movf	??_LCD_SetCursor^0,w,c
   686   000886  0F07               	addlw	low LCD_SetCursor@row_offsets
   687   000888  6E05               	movwf	(??_LCD_SetCursor+1)^0,c
   688   00088A  C005  FFF6         	movff	??_LCD_SetCursor+1,tblptrl
   689   00088E                     	if	0	;There is only one active tblptr byte
   690   00088E                     	endif
   691   00088E                     	if	0	;tblptru may be non-zero
   692   00088E                     	endif
   693   00088E                     	if	0	;tblptru may be non-zero
   694   00088E                     	endif
   695   00088E  0008               	tblrd		*
   696   000890  50F5               	movf	tablat,w,c
   697   000892  2403               	addwf	LCD_SetCursor@col^0,w,c
   698   000894  6E06               	movwf	(??_LCD_SetCursor+2)^0,c
   699   000896  0406               	decf	(??_LCD_SetCursor+2)^0,w,c
   700   000898  EC7A  F004         	call	_LCD_Command
   701   00089C                     l25:
   702   00089C  0012               	return		;funcret
   703   00089E                     __end_of_LCD_SetCursor:
   704                           	callstack 0
   705                           
   706 ;; *************** function _LCD_Init *****************
   707 ;; Defined at:
   708 ;;		line 64 in file "./lcd.h"
   709 ;; Parameters:    Size  Location     Type
   710 ;;		None
   711 ;; Auto vars:     Size  Location     Type
   712 ;;  i               1    3[COMRAM] unsigned char 
   713 ;; Return value:  Size  Location     Type
   714 ;;                  1    wreg      void 
   715 ;; Registers used:
   716 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   717 ;; Tracked objects:
   718 ;;		On entry : 0/0
   719 ;;		On exit  : 0/0
   720 ;;		Unchanged: 0/0
   721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   722 ;;      Params:         0       0       0       0       0       0       0       0       0
   723 ;;      Locals:         1       0       0       0       0       0       0       0       0
   724 ;;      Temps:          1       0       0       0       0       0       0       0       0
   725 ;;      Totals:         2       0       0       0       0       0       0       0       0
   726 ;;Total ram usage:        2 bytes
   727 ;; Hardware stack levels used: 1
   728 ;; Hardware stack levels required when called: 1
   729 ;; This function calls:
   730 ;;		_LCD_Command
   731 ;; This function is called by:
   732 ;;		_main
   733 ;; This function uses a non-reentrant model
   734 ;;
   735                           
   736                           	psect	text5
   737   000812                     __ptext5:
   738                           	callstack 0
   739   000812                     _LCD_Init:
   740                           	callstack 29
   741   000812                     
   742                           ;./lcd.h: 65:     static const unsigned char init_seq[] = {0x38, 0x38, 0x38, 0x0C, 0x06,
      +                           0x01};;./lcd.h: 66:     ADCON1 = 0x0F;
   743   000812  0E0F               	movlw	15
   744   000814  6EC1               	movwf	193,c	;volatile
   745   000816                     
   746                           ;./lcd.h: 67:     PORTD = 0x00;
   747   000816  6A83               	clrf	131,c	;volatile
   748   000818                     
   749                           ;./lcd.h: 68:     PORTE &= 0xF8;
   750   000818  0EF8               	movlw	248
   751   00081A  1684               	andwf	132,f,c	;volatile
   752   00081C                     
   753                           ;./lcd.h: 69:     TRISD = 0x00;
   754   00081C  6A95               	clrf	149,c	;volatile
   755   00081E                     
   756                           ;./lcd.h: 70:     TRISE &= 0xF8;
   757   00081E  0EF8               	movlw	248
   758   000820  1696               	andwf	150,f,c	;volatile
   759   000822                     
   760                           ;./lcd.h: 72:     for (unsigned char i = 0; i < sizeof(init_seq); i++) {
   761   000822  6A04               	clrf	LCD_Init@i^0,c
   762   000824                     l782:
   763                           
   764                           ;./lcd.h: 73:         LCD_Command(init_seq[i]);
   765   000824  5004               	movf	LCD_Init@i^0,w,c
   766   000826  0F01               	addlw	low LCD_Init@init_seq
   767   000828  6E03               	movwf	??_LCD_Init^0,c
   768   00082A  C003  FFF6         	movff	??_LCD_Init,tblptrl
   769   00082E                     	if	0	;There is only one active tblptr byte
   770   00082E                     	endif
   771   00082E                     	if	0	;tblptru may be non-zero
   772   00082E                     	endif
   773   00082E                     	if	0	;tblptru may be non-zero
   774   00082E                     	endif
   775   00082E  0008               	tblrd		*
   776   000830  50F5               	movf	tablat,w,c
   777   000832  EC7A  F004         	call	_LCD_Command
   778   000836                     
   779                           ;./lcd.h: 74:         _delay((unsigned long)((5)*(4000000/4000.0)));
   780   000836  0E07               	movlw	7
   781   000838  6E03               	movwf	??_LCD_Init^0,c
   782   00083A  0E7D               	movlw	125
   783   00083C                     u107:
   784   00083C  2EE8               	decfsz	wreg,f,c
   785   00083E  D7FE               	bra	u107
   786   000840  2E03               	decfsz	??_LCD_Init^0,f,c
   787   000842  D7FC               	bra	u107
   788   000844  0000               	nop	
   789   000846                     
   790                           ;./lcd.h: 75:     }
   791   000846  2A04               	incf	LCD_Init@i^0,f,c
   792   000848  0E05               	movlw	5
   793   00084A  6404               	cpfsgt	LCD_Init@i^0,c
   794   00084C  EF2A  F004         	goto	u41
   795   000850  EF2C  F004         	goto	u40
   796   000854                     u41:
   797   000854  EF12  F004         	goto	l782
   798   000858                     u40:
   799   000858  0012               	return		;funcret
   800   00085A                     __end_of_LCD_Init:
   801                           	callstack 0
   802                           
   803 ;; *************** function _LCD_Command *****************
   804 ;; Defined at:
   805 ;;		line 21 in file "./lcd.h"
   806 ;; Parameters:    Size  Location     Type
   807 ;;  cmd             1    wreg     unsigned char 
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  cmd             1    1[COMRAM] unsigned char 
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      void 
   812 ;; Registers used:
   813 ;;		wreg
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   819 ;;      Params:         0       0       0       0       0       0       0       0       0
   820 ;;      Locals:         1       0       0       0       0       0       0       0       0
   821 ;;      Temps:          1       0       0       0       0       0       0       0       0
   822 ;;      Totals:         2       0       0       0       0       0       0       0       0
   823 ;;Total ram usage:        2 bytes
   824 ;; Hardware stack levels used: 1
   825 ;; This function calls:
   826 ;;		Nothing
   827 ;; This function is called by:
   828 ;;		_LCD_SetCursor
   829 ;;		_LCD_Init
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text6
   834   0008F4                     __ptext6:
   835                           	callstack 0
   836   0008F4                     _LCD_Command:
   837                           	callstack 29
   838                           
   839                           ;incstack = 0
   840                           ;LCD_Command@cmd stored from wreg
   841   0008F4  6E02               	movwf	LCD_Command@cmd^0,c
   842   0008F6                     
   843                           ;./lcd.h: 22:     PORTEbits.RE0 = 0;
   844   0008F6  9084               	bcf	132,0,c	;volatile
   845   0008F8                     
   846                           ;./lcd.h: 23:     PORTD = cmd;
   847   0008F8  C002  FF83         	movff	LCD_Command@cmd,3971	;volatile
   848   0008FC                     
   849                           ;./lcd.h: 24:     PORTEbits.RE1 = 1;
   850   0008FC  8284               	bsf	132,1,c	;volatile
   851   0008FE                     
   852                           ;./lcd.h: 25:     _delay((unsigned long)((2)*(4000000/4000.0)));
   853   0008FE  0E03               	movlw	3
   854   000900  6E01               	movwf	??_LCD_Command^0,c
   855   000902  0E98               	movlw	152
   856   000904                     u117:
   857   000904  2EE8               	decfsz	wreg,f,c
   858   000906  D7FE               	bra	u117
   859   000908  2E01               	decfsz	??_LCD_Command^0,f,c
   860   00090A  D7FC               	bra	u117
   861   00090C                     
   862                           ;./lcd.h: 26:     PORTEbits.RE1 = 0;
   863   00090C  9284               	bcf	132,1,c	;volatile
   864   00090E                     
   865                           ;./lcd.h: 27:     _delay((unsigned long)((2)*(4000000/4000.0)));
   866   00090E  0E03               	movlw	3
   867   000910  6E01               	movwf	??_LCD_Command^0,c
   868   000912  0E98               	movlw	152
   869   000914                     u127:
   870   000914  2EE8               	decfsz	wreg,f,c
   871   000916  D7FE               	bra	u127
   872   000918  2E01               	decfsz	??_LCD_Command^0,f,c
   873   00091A  D7FC               	bra	u127
   874   00091C  0012               	return		;funcret
   875   00091E                     __end_of_LCD_Command:
   876                           	callstack 0
   877                           
   878                           	psect	rparam
   879   000001                     ___rparam_used  equ	1
   880   000000                     ___param_bank   equ	0
   881   000000                     __Lparam        equ	__Lrparam
   882   000000                     __Hparam        equ	__Hrparam
   883                           
   884                           	psect	config
   885                           
   886                           ;Config register CONFIG1L @ 0x300000
   887                           ;	unspecified, using default values
   888                           ;	PLL Prescaler Selection bits
   889                           ;	PLLDIV = 0x0, unprogrammed default
   890                           ;	System Clock Postscaler Selection bits
   891                           ;	CPUDIV = 0x0, unprogrammed default
   892                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   893                           ;	USBDIV = 0x0, unprogrammed default
   894   300000                     	org	3145728
   895   300000  00                 	db	0
   896                           
   897                           ;Config register CONFIG1H @ 0x300001
   898                           ;	Oscillator Selection bits
   899                           ;	FOSC = HS, HS oscillator (HS)
   900                           ;	Fail-Safe Clock Monitor Enable bit
   901                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   902                           ;	Internal/External Oscillator Switchover bit
   903                           ;	IESO = OFF, Oscillator Switchover mode disabled
   904   300001                     	org	3145729
   905   300001  0C                 	db	12
   906                           
   907                           ;Config register CONFIG2L @ 0x300002
   908                           ;	Power-up Timer Enable bit
   909                           ;	PWRT = ON, PWRT enabled
   910                           ;	Brown-out Reset Enable bits
   911                           ;	BOR = 0x3, unprogrammed default
   912                           ;	Brown-out Reset Voltage bits
   913                           ;	BORV = 0, Maximum setting 4.59V
   914                           ;	USB Voltage Regulator Enable bit
   915                           ;	VREGEN = 0x0, unprogrammed default
   916   300002                     	org	3145730
   917   300002  06                 	db	6
   918                           
   919                           ;Config register CONFIG2H @ 0x300003
   920                           ;	Watchdog Timer Enable bit
   921                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   922                           ;	Watchdog Timer Postscale Select bits
   923                           ;	WDTPS = 128, 1:128
   924   300003                     	org	3145731
   925   300003  0E                 	db	14
   926                           
   927                           ; Padding undefined space
   928   300004                     	org	3145732
   929   300004  FF                 	db	255
   930                           
   931                           ;Config register CONFIG3H @ 0x300005
   932                           ;	CCP2 MUX bit
   933                           ;	CCP2MX = 0x1, unprogrammed default
   934                           ;	PORTB A/D Enable bit
   935                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   936                           ;	Low-Power Timer 1 Oscillator Enable bit
   937                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   938                           ;	MCLR Pin Enable bit
   939                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   940   300005                     	org	3145733
   941   300005  81                 	db	129
   942                           
   943                           ;Config register CONFIG4L @ 0x300006
   944                           ;	Stack Full/Underflow Reset Enable bit
   945                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
   946                           ;	Single-Supply ICSP Enable bit
   947                           ;	LVP = OFF, Single-Supply ICSP disabled
   948                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   949                           ;	ICPRT = 0x0, unprogrammed default
   950                           ;	Extended Instruction Set Enable bit
   951                           ;	XINST = 0x0, unprogrammed default
   952                           ;	Background Debugger Enable bit
   953                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
   954   300006                     	org	3145734
   955   300006  80                 	db	128
   956                           
   957                           ; Padding undefined space
   958   300007                     	org	3145735
   959   300007  FF                 	db	255
   960                           tosu	equ	0xFFF
   961                           tosh	equ	0xFFE
   962                           tosl	equ	0xFFD
   963                           stkptr	equ	0xFFC
   964                           pclatu	equ	0xFFB
   965                           pclath	equ	0xFFA
   966                           pcl	equ	0xFF9
   967                           tblptru	equ	0xFF8
   968                           tblptrh	equ	0xFF7
   969                           tblptrl	equ	0xFF6
   970                           tablat	equ	0xFF5
   971                           prodh	equ	0xFF4
   972                           prodl	equ	0xFF3
   973                           indf0	equ	0xFEF
   974                           postinc0	equ	0xFEE
   975                           postdec0	equ	0xFED
   976                           preinc0	equ	0xFEC
   977                           plusw0	equ	0xFEB
   978                           fsr0h	equ	0xFEA
   979                           fsr0l	equ	0xFE9
   980                           wreg	equ	0xFE8
   981                           indf1	equ	0xFE7
   982                           postinc1	equ	0xFE6
   983                           postdec1	equ	0xFE5
   984                           preinc1	equ	0xFE4
   985                           plusw1	equ	0xFE3
   986                           fsr1h	equ	0xFE2
   987                           fsr1l	equ	0xFE1
   988                           bsr	equ	0xFE0
   989                           indf2	equ	0xFDF
   990                           postinc2	equ	0xFDE
   991                           postdec2	equ	0xFDD
   992                           preinc2	equ	0xFDC
   993                           plusw2	equ	0xFDB
   994                           fsr2h	equ	0xFDA
   995                           fsr2l	equ	0xFD9
   996                           status	equ	0xFD8

Data Sizes:
    Strings     6
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7       7
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    LCD_WriteString@str	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_LCD_SetCursor
    _LCD_WriteString->_LCD_WriteChar
    _LCD_SetCursor->_LCD_Command
    _LCD_Init->_LCD_Command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     246
                           _LCD_Init
                      _LCD_SetCursor
                    _LCD_WriteString
                         _init_ports
 ---------------------------------------------------------------------------------
 (1) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      1     0      1      61
                                              2 COMRAM     1     0      1
                      _LCD_WriteChar
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteChar                                        2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_SetCursor                                        5     4      1     125
                                              2 COMRAM     5     4      1
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      60
                                              2 COMRAM     2     2      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Command
   _LCD_SetCursor
     _LCD_Command
   _LCD_WriteString
     _LCD_WriteChar
   _init_ports

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMRAM           95      0       0      0.0%
BITBANK0           160      0       0      0.0%
BITBANK1           256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BITBANK3           239      0       0      0.0%
BITBANK4           256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BITBIGSFR_1l        36      0       0      0.0%
BITBIGSFRl          35      0       0      0.0%
BITBIGSFRh          23      0       0      0.0%
BITBIGSFR_1h        18      0       0      0.0%
BITBIGSFR_5         12      0       0      0.0%
BITBIGSFR_2          6      0       0      0.0%
BITBIGSFR_3          3      0       0      0.0%
BITBIGSFR_4          3      0       0      0.0%
COMRAM              95      7       7      7.4%
BANK0              160      0       0      0.0%
BANK1              256      0       0      0.0%
BANK2              256      0       0      0.0%
BANK3              239      0       0      0.0%
BANK4              256      0       0      0.0%
BANK5              256      0       0      0.0%
BANK6              256      0       0      0.0%
BANK7              256      0       0      0.0%
BIGRAM_1          1024      0       0      0.0%
BIGRAM            1006      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       7      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu May 29 10:51:16 2025

                    ?_LCD_Command 0001                                l41 0858                                l25 089C  
                              l34 08C8                                l19 091C                                l28 08F2  
                              l52 0956                                l46 0938                                l47 0938  
                              u40 0858                                u41 0854                                u50 086C  
                              u51 0868                                u60 087C                                u61 0878  
                              u70 08C8                                u71 08C4                                u87 08DA  
                              u97 08EA                     _LCD_SetCursor 085A                               l800 085C  
                             l730 08F8                               l802 086C                               l810 08AE  
                             l732 08FC                               l804 087C                               l740 08CC  
                             l812 08B0                               l820 0930                               l734 08FE  
                             l750 08E4                               l742 08CE                               l806 089E  
                             l814 091E                               l736 090C                               l728 08F6  
                             l744 08D2                               l808 08A2                               l816 0922  
                             l738 090E                               l770 0818                               l746 08D4  
                             l818 0926                               l772 081C                               l748 08E2  
                             l782 0824                               l774 081E                               l766 0812  
                             l790 094E                               l784 0836                               l776 0822  
                             l768 0816                               l786 0846                               l788 0848  
                             u107 083C                               u117 0904                               u127 0914  
                             wreg 0FE8                 ??_LCD_WriteString 0004                              STR_1 080B  
              LCD_WriteString@str 0003                              _main 091E                  LCD_Init@init_seq 0801  
                            start 7D3C                     _LCD_WriteChar 08CA                      ___param_bank 0000  
                __end_of_LCD_Init 085A                    ?_LCD_SetCursor 0003                             ?_main 0001  
                           _PORTD 0F83                             _PORTE 0F84                             _TRISD 0F95  
                           _TRISE 0F96                             tablat 0FF5                             status 0FD8  
                  ?_LCD_WriteChar 0001                   __initialization 0940                      __end_of_main 0940  
                          ??_main 0008                     __activetblptr 0001                            _ADCON1 0FC1  
                 ??_LCD_SetCursor 0004                            isa$std 0001                      __mediumconst 0800  
                          tblptrh 0FF7                            tblptrl 0FF6                            tblptru 0FF8  
                      __accesstop 0060           __end_of__initialization 0940                         ?_LCD_Init 0001  
                 ??_LCD_WriteChar 0001                     ___rparam_used 0001  __end_ofLCD_SetCursor@row_offsets 080B  
                       LCD_Init@i 0004                    __pcstackCOMRAM 0001                   _LCD_WriteString 089E  
        __end_ofLCD_Init@init_seq 0807                        ??_LCD_Init 0003           __end_of_LCD_WriteString 08CA  
                         __Hparam 0000                           __Lparam 0000                 LCD_WriteChar@data 0002  
                    __psmallconst 0800          LCD_SetCursor@row_offsets 0807                           __pcinit 0940  
                      _init_ports 094E                           __ramtop 0800                           __ptext0 091E  
                         __ptext1 094E                           __ptext2 089E                           __ptext3 08CA  
                         __ptext4 085A                           __ptext5 0812                           __ptext6 08F4  
            end_of_initialization 0940                  LCD_SetCursor@col 0003                  LCD_SetCursor@row 0007  
                  LCD_Command@cmd 0002                         _PORTEbits 0F84                  ?_LCD_WriteString 0003  
                   ??_LCD_Command 0001             __end_of_LCD_SetCursor 089E                       ?_init_ports 0001  
             start_initialization 0940             __end_of_LCD_WriteChar 08F4               __end_of_LCD_Command 091E  
                     __smallconst 0800                          _LCD_Init 0812                       _LCD_Command 08F4  
                        __Hrparam 0000                          __Lrparam 0000                      __Lsmallconst 0800  
                    ??_init_ports 0001                __end_of_init_ports 0958                          isa$xinst 0000  
