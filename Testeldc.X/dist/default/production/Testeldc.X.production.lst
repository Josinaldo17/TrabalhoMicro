

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu May 29 11:07:00 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    18   000000                     
    19                           ; Generated 17/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4550 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53   000FE0                     bsr             equ	4064
    54   000FE9                     fsr0            equ	4073
    55   000FEA                     fsr0h           equ	4074
    56   000FE9                     fsr0l           equ	4073
    57   000FE1                     fsr1            equ	4065
    58   000FE2                     fsr1h           equ	4066
    59   000FE1                     fsr1l           equ	4065
    60   000FD9                     fsr2            equ	4057
    61   000FDA                     fsr2h           equ	4058
    62   000FD9                     fsr2l           equ	4057
    63   000FEF                     indf0           equ	4079
    64   000FE7                     indf1           equ	4071
    65   000FDF                     indf2           equ	4063
    66   000FF2                     intcon          equ	4082
    67   000000                     nvmcon          equ	0
    68   000FF9                     pcl             equ	4089
    69   000FFA                     pclath          equ	4090
    70   000FFB                     pclatu          equ	4091
    71   000FEB                     plusw0          equ	4075
    72   000FE3                     plusw1          equ	4067
    73   000FDB                     plusw2          equ	4059
    74   000FED                     postdec0        equ	4077
    75   000FE5                     postdec1        equ	4069
    76   000FDD                     postdec2        equ	4061
    77   000FEE                     postinc0        equ	4078
    78   000FE6                     postinc1        equ	4070
    79   000FDE                     postinc2        equ	4062
    80   000FEC                     preinc0         equ	4076
    81   000FE4                     preinc1         equ	4068
    82   000FDC                     preinc2         equ	4060
    83   000FF3                     prod            equ	4083
    84   000FF4                     prodh           equ	4084
    85   000FF3                     prodl           equ	4083
    86   000FD8                     status          equ	4056
    87   000FF5                     tablat          equ	4085
    88   000FF6                     tblptr          equ	4086
    89   000FF7                     tblptrh         equ	4087
    90   000FF6                     tblptrl         equ	4086
    91   000FF8                     tblptru         equ	4088
    92   000FFD                     tosl            equ	4093
    93   000FE8                     wreg            equ	4072
    94   000F62                     SPPDATA         equ	3938	;# 
    95   000F63                     SPPCFG          equ	3939	;# 
    96   000F64                     SPPEPS          equ	3940	;# 
    97   000F65                     SPPCON          equ	3941	;# 
    98   000F66                     UFRM            equ	3942	;# 
    99   000F66                     UFRML           equ	3942	;# 
   100   000F67                     UFRMH           equ	3943	;# 
   101   000F68                     UIR             equ	3944	;# 
   102   000F69                     UIE             equ	3945	;# 
   103   000F6A                     UEIR            equ	3946	;# 
   104   000F6B                     UEIE            equ	3947	;# 
   105   000F6C                     USTAT           equ	3948	;# 
   106   000F6D                     UCON            equ	3949	;# 
   107   000F6E                     UADDR           equ	3950	;# 
   108   000F6F                     UCFG            equ	3951	;# 
   109   000F70                     UEP0            equ	3952	;# 
   110   000F71                     UEP1            equ	3953	;# 
   111   000F72                     UEP2            equ	3954	;# 
   112   000F73                     UEP3            equ	3955	;# 
   113   000F74                     UEP4            equ	3956	;# 
   114   000F75                     UEP5            equ	3957	;# 
   115   000F76                     UEP6            equ	3958	;# 
   116   000F77                     UEP7            equ	3959	;# 
   117   000F78                     UEP8            equ	3960	;# 
   118   000F79                     UEP9            equ	3961	;# 
   119   000F7A                     UEP10           equ	3962	;# 
   120   000F7B                     UEP11           equ	3963	;# 
   121   000F7C                     UEP12           equ	3964	;# 
   122   000F7D                     UEP13           equ	3965	;# 
   123   000F7E                     UEP14           equ	3966	;# 
   124   000F7F                     UEP15           equ	3967	;# 
   125   000F80                     PORTA           equ	3968	;# 
   126   000F81                     PORTB           equ	3969	;# 
   127   000F82                     PORTC           equ	3970	;# 
   128   000F83                     PORTD           equ	3971	;# 
   129   000F84                     PORTE           equ	3972	;# 
   130   000F89                     LATA            equ	3977	;# 
   131   000F8A                     LATB            equ	3978	;# 
   132   000F8B                     LATC            equ	3979	;# 
   133   000F8C                     LATD            equ	3980	;# 
   134   000F8D                     LATE            equ	3981	;# 
   135   000F92                     TRISA           equ	3986	;# 
   136   000F92                     DDRA            equ	3986	;# 
   137   000F93                     TRISB           equ	3987	;# 
   138   000F93                     DDRB            equ	3987	;# 
   139   000F94                     TRISC           equ	3988	;# 
   140   000F94                     DDRC            equ	3988	;# 
   141   000F95                     TRISD           equ	3989	;# 
   142   000F95                     DDRD            equ	3989	;# 
   143   000F96                     TRISE           equ	3990	;# 
   144   000F96                     DDRE            equ	3990	;# 
   145   000F9B                     OSCTUNE         equ	3995	;# 
   146   000F9D                     PIE1            equ	3997	;# 
   147   000F9E                     PIR1            equ	3998	;# 
   148   000F9F                     IPR1            equ	3999	;# 
   149   000FA0                     PIE2            equ	4000	;# 
   150   000FA1                     PIR2            equ	4001	;# 
   151   000FA2                     IPR2            equ	4002	;# 
   152   000FA6                     EECON1          equ	4006	;# 
   153   000FA7                     EECON2          equ	4007	;# 
   154   000FA8                     EEDATA          equ	4008	;# 
   155   000FA9                     EEADR           equ	4009	;# 
   156   000FAB                     RCSTA           equ	4011	;# 
   157   000FAB                     RCSTA1          equ	4011	;# 
   158   000FAC                     TXSTA           equ	4012	;# 
   159   000FAC                     TXSTA1          equ	4012	;# 
   160   000FAD                     TXREG           equ	4013	;# 
   161   000FAD                     TXREG1          equ	4013	;# 
   162   000FAE                     RCREG           equ	4014	;# 
   163   000FAE                     RCREG1          equ	4014	;# 
   164   000FAF                     SPBRG           equ	4015	;# 
   165   000FAF                     SPBRG1          equ	4015	;# 
   166   000FB0                     SPBRGH          equ	4016	;# 
   167   000FB1                     T3CON           equ	4017	;# 
   168   000FB2                     TMR3            equ	4018	;# 
   169   000FB2                     TMR3L           equ	4018	;# 
   170   000FB3                     TMR3H           equ	4019	;# 
   171   000FB4                     CMCON           equ	4020	;# 
   172   000FB5                     CVRCON          equ	4021	;# 
   173   000FB6                     ECCP1AS         equ	4022	;# 
   174   000FB6                     CCP1AS          equ	4022	;# 
   175   000FB7                     ECCP1DEL        equ	4023	;# 
   176   000FB7                     CCP1DEL         equ	4023	;# 
   177   000FB8                     BAUDCON         equ	4024	;# 
   178   000FB8                     BAUDCTL         equ	4024	;# 
   179   000FBA                     CCP2CON         equ	4026	;# 
   180   000FBB                     CCPR2           equ	4027	;# 
   181   000FBB                     CCPR2L          equ	4027	;# 
   182   000FBC                     CCPR2H          equ	4028	;# 
   183   000FBD                     CCP1CON         equ	4029	;# 
   184   000FBD                     ECCP1CON        equ	4029	;# 
   185   000FBE                     CCPR1           equ	4030	;# 
   186   000FBE                     CCPR1L          equ	4030	;# 
   187   000FBF                     CCPR1H          equ	4031	;# 
   188   000FC0                     ADCON2          equ	4032	;# 
   189   000FC1                     ADCON1          equ	4033	;# 
   190   000FC2                     ADCON0          equ	4034	;# 
   191   000FC3                     ADRES           equ	4035	;# 
   192   000FC3                     ADRESL          equ	4035	;# 
   193   000FC4                     ADRESH          equ	4036	;# 
   194   000FC5                     SSPCON2         equ	4037	;# 
   195   000FC6                     SSPCON1         equ	4038	;# 
   196   000FC7                     SSPSTAT         equ	4039	;# 
   197   000FC8                     SSPADD          equ	4040	;# 
   198   000FC9                     SSPBUF          equ	4041	;# 
   199   000FCA                     T2CON           equ	4042	;# 
   200   000FCB                     PR2             equ	4043	;# 
   201   000FCB                     MEMCON          equ	4043	;# 
   202   000FCC                     TMR2            equ	4044	;# 
   203   000FCD                     T1CON           equ	4045	;# 
   204   000FCE                     TMR1            equ	4046	;# 
   205   000FCE                     TMR1L           equ	4046	;# 
   206   000FCF                     TMR1H           equ	4047	;# 
   207   000FD0                     RCON            equ	4048	;# 
   208   000FD1                     WDTCON          equ	4049	;# 
   209   000FD2                     HLVDCON         equ	4050	;# 
   210   000FD2                     LVDCON          equ	4050	;# 
   211   000FD3                     OSCCON          equ	4051	;# 
   212   000FD5                     T0CON           equ	4053	;# 
   213   000FD6                     TMR0            equ	4054	;# 
   214   000FD6                     TMR0L           equ	4054	;# 
   215   000FD7                     TMR0H           equ	4055	;# 
   216   000FD8                     STATUS          equ	4056	;# 
   217   000FD9                     FSR2            equ	4057	;# 
   218   000FD9                     FSR2L           equ	4057	;# 
   219   000FDA                     FSR2H           equ	4058	;# 
   220   000FDB                     PLUSW2          equ	4059	;# 
   221   000FDC                     PREINC2         equ	4060	;# 
   222   000FDD                     POSTDEC2        equ	4061	;# 
   223   000FDE                     POSTINC2        equ	4062	;# 
   224   000FDF                     INDF2           equ	4063	;# 
   225   000FE0                     BSR             equ	4064	;# 
   226   000FE1                     FSR1            equ	4065	;# 
   227   000FE1                     FSR1L           equ	4065	;# 
   228   000FE2                     FSR1H           equ	4066	;# 
   229   000FE3                     PLUSW1          equ	4067	;# 
   230   000FE4                     PREINC1         equ	4068	;# 
   231   000FE5                     POSTDEC1        equ	4069	;# 
   232   000FE6                     POSTINC1        equ	4070	;# 
   233   000FE7                     INDF1           equ	4071	;# 
   234   000FE8                     WREG            equ	4072	;# 
   235   000FE9                     FSR0            equ	4073	;# 
   236   000FE9                     FSR0L           equ	4073	;# 
   237   000FEA                     FSR0H           equ	4074	;# 
   238   000FEB                     PLUSW0          equ	4075	;# 
   239   000FEC                     PREINC0         equ	4076	;# 
   240   000FED                     POSTDEC0        equ	4077	;# 
   241   000FEE                     POSTINC0        equ	4078	;# 
   242   000FEF                     INDF0           equ	4079	;# 
   243   000FF0                     INTCON3         equ	4080	;# 
   244   000FF1                     INTCON2         equ	4081	;# 
   245   000FF2                     INTCON          equ	4082	;# 
   246   000FF3                     PROD            equ	4083	;# 
   247   000FF3                     PRODL           equ	4083	;# 
   248   000FF4                     PRODH           equ	4084	;# 
   249   000FF5                     TABLAT          equ	4085	;# 
   250   000FF6                     TBLPTR          equ	4086	;# 
   251   000FF6                     TBLPTRL         equ	4086	;# 
   252   000FF7                     TBLPTRH         equ	4087	;# 
   253   000FF8                     TBLPTRU         equ	4088	;# 
   254   000FF9                     PCLAT           equ	4089	;# 
   255   000FF9                     PC              equ	4089	;# 
   256   000FF9                     PCL             equ	4089	;# 
   257   000FFA                     PCLATH          equ	4090	;# 
   258   000FFB                     PCLATU          equ	4091	;# 
   259   000FFC                     STKPTR          equ	4092	;# 
   260   000FFD                     TOS             equ	4093	;# 
   261   000FFD                     TOSL            equ	4093	;# 
   262   000FFE                     TOSH            equ	4094	;# 
   263   000FFF                     TOSU            equ	4095	;# 
   264                           
   265                           	psect	smallconst
   266   000800                     __psmallconst:
   267                           	callstack 0
   268   000800  00                 	db	0
   269   000801                     LCD_Init@init_seq:
   270                           	callstack 0
   271   000801  38                 	db	56
   272   000802  38                 	db	56
   273   000803  38                 	db	56
   274   000804  0C                 	db	12
   275   000805  06                 	db	6
   276   000806  01                 	db	1
   277   000807                     __end_ofLCD_Init@init_seq:
   278                           	callstack 0
   279   000807                     LCD_SetCursor@row_offsets:
   280                           	callstack 0
   281   000807  80                 	db	128
   282   000808  C0                 	db	192
   283   000809  90                 	db	144
   284   00080A  D0                 	db	208
   285   00080B                     __end_ofLCD_SetCursor@row_offsets:
   286                           	callstack 0
   287   000F96                     _TRISE          set	3990
   288   000F95                     _TRISD          set	3989
   289   000F84                     _PORTE          set	3972
   290   000FC1                     _ADCON1         set	4033
   291   000F83                     _PORTD          set	3971
   292   000F84                     _PORTEbits      set	3972
   293   00080B                     STR_1:
   294   00080B  4F                 	db	79	;'O'
   295   00080C  6C                 	db	108	;'l'
   296   00080D  61                 	db	97	;'a'
   297   00080E  00                 	db	0
   298   00080F  00                 	db	0	; dummy byte at the end
   299   000800                     __smallconst    set	__psmallconst
   300   000800                     __mediumconst   set	__psmallconst
   301   000001                     __activetblptr  equ	1
   302                           
   303                           ; #config settings
   304                           
   305                           	psect	cinit
   306   00093E                     __pcinit:
   307                           	callstack 0
   308   00093E                     start_initialization:
   309                           	callstack 0
   310   00093E                     __initialization:
   311                           	callstack 0
   312   00093E                     end_of_initialization:
   313                           	callstack 0
   314   00093E                     __end_of__initialization:
   315                           	callstack 0
   316   00093E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   317   000940  6EF8               	movwf	tblptru,c
   318   000942  0E08               	movlw	high __Lsmallconst
   319   000944  6EF7               	movwf	tblptrh,c
   320   000946  0100               	movlb	0
   321   000948  EF8E  F004         	goto	_main	;jump to C main() function
   322                           
   323                           	psect	cstackCOMRAM
   324   000001                     __pcstackCOMRAM:
   325                           	callstack 0
   326   000001                     ??_LCD_Command:
   327   000001                     ??_LCD_WriteChar:
   328                           
   329                           ; 1 bytes @ 0x0
   330   000001                     	ds	1
   331   000002                     LCD_Command@cmd:
   332                           	callstack 0
   333   000002                     LCD_WriteChar@data:
   334                           	callstack 0
   335                           
   336                           ; 1 bytes @ 0x1
   337   000002                     	ds	1
   338   000003                     LCD_SetCursor@col:
   339                           	callstack 0
   340   000003                     LCD_WriteString@str:
   341                           	callstack 0
   342   000003                     ??_LCD_Init:
   343                           
   344                           ; 1 bytes @ 0x2
   345   000003                     	ds	1
   346   000004                     LCD_Init@i:
   347                           	callstack 0
   348   000004                     ??_LCD_SetCursor:
   349   000004                     
   350                           ; 1 bytes @ 0x3
   351   000004                     	ds	3
   352   000007                     LCD_SetCursor@row:
   353                           	callstack 0
   354                           
   355                           ; 1 bytes @ 0x6
   356   000007                     	ds	1
   357   000008                     
   358                           ; 1 bytes @ 0x7
   359 ;;
   360 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   361 ;;
   362 ;; *************** function _main *****************
   363 ;; Defined at:
   364 ;;		line 9 in file "main.c"
   365 ;; Parameters:    Size  Location     Type
   366 ;;		None
   367 ;; Auto vars:     Size  Location     Type
   368 ;;		None
   369 ;; Return value:  Size  Location     Type
   370 ;;                  1    wreg      void 
   371 ;; Registers used:
   372 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   373 ;; Tracked objects:
   374 ;;		On entry : 0/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   378 ;;      Params:         0       0       0       0       0       0       0       0       0
   379 ;;      Locals:         0       0       0       0       0       0       0       0       0
   380 ;;      Temps:          0       0       0       0       0       0       0       0       0
   381 ;;      Totals:         0       0       0       0       0       0       0       0       0
   382 ;;Total ram usage:        0 bytes
   383 ;; Hardware stack levels required when called: 2
   384 ;; This function calls:
   385 ;;		_LCD_Init
   386 ;;		_LCD_SetCursor
   387 ;;		_LCD_WriteString
   388 ;;		_init_ports
   389 ;; This function is called by:
   390 ;;		Startup code after reset
   391 ;; This function uses a non-reentrant model
   392 ;;
   393                           
   394                           	psect	text0
   395   00091C                     __ptext0:
   396                           	callstack 0
   397   00091C                     _main:
   398                           	callstack 29
   399   00091C                     
   400                           ;main.c: 10:     init_ports();
   401   00091C  ECA6  F004         	call	_init_ports	;wreg free
   402   000920                     
   403                           ;main.c: 12:     LCD_Init();
   404   000920  EC08  F004         	call	_LCD_Init	;wreg free
   405   000924                     
   406                           ;main.c: 13:     LCD_SetCursor(1, 2);
   407   000924  0E02               	movlw	2
   408   000926  6E03               	movwf	LCD_SetCursor@col^0,c
   409   000928  0E01               	movlw	1
   410   00092A  EC2C  F004         	call	_LCD_SetCursor
   411   00092E                     
   412                           ;main.c: 14:     LCD_WriteString("Ola");
   413   00092E  0E0B               	movlw	low STR_1
   414   000930  6E03               	movwf	LCD_WriteString@str^0,c
   415   000932  EC4E  F004         	call	_LCD_WriteString	;wreg free
   416   000936                     l46:
   417   000936  EF9B  F004         	goto	l46
   418   00093A  EFFE  F03F         	goto	start
   419   00093E                     __end_of_main:
   420                           	callstack 0
   421                           
   422 ;; *************** function _init_ports *****************
   423 ;; Defined at:
   424 ;;		line 22 in file "main.c"
   425 ;; Parameters:    Size  Location     Type
   426 ;;		None
   427 ;; Auto vars:     Size  Location     Type
   428 ;;		None
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      void 
   431 ;; Registers used:
   432 ;;		None
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   438 ;;      Params:         0       0       0       0       0       0       0       0       0
   439 ;;      Locals:         0       0       0       0       0       0       0       0       0
   440 ;;      Temps:          0       0       0       0       0       0       0       0       0
   441 ;;      Totals:         0       0       0       0       0       0       0       0       0
   442 ;;Total ram usage:        0 bytes
   443 ;; Hardware stack levels used: 1
   444 ;; This function calls:
   445 ;;		Nothing
   446 ;; This function is called by:
   447 ;;		_main
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           	psect	text1
   452   00094C                     __ptext1:
   453                           	callstack 0
   454   00094C                     _init_ports:
   455                           	callstack 30
   456   00094C                     
   457                           ;main.c: 23:     TRISD = 0x00;
   458   00094C  6A95               	clrf	149,c	;volatile
   459                           
   460                           ;main.c: 24:     TRISE = 0x00;
   461   00094E  6A96               	clrf	150,c	;volatile
   462                           
   463                           ;main.c: 25:     PORTD = 0x00;
   464   000950  6A83               	clrf	131,c	;volatile
   465                           
   466                           ;main.c: 26:     PORTE = 0x00;
   467   000952  6A84               	clrf	132,c	;volatile
   468   000954  0012               	return		;funcret
   469   000956                     __end_of_init_ports:
   470                           	callstack 0
   471                           
   472 ;; *************** function _LCD_WriteString *****************
   473 ;; Defined at:
   474 ;;		line 55 in file "./lcd.h"
   475 ;; Parameters:    Size  Location     Type
   476 ;;  str             1    2[COMRAM] PTR const unsigned char 
   477 ;;		 -> STR_1(4), 
   478 ;; Auto vars:     Size  Location     Type
   479 ;;		None
   480 ;; Return value:  Size  Location     Type
   481 ;;                  1    wreg      void 
   482 ;; Registers used:
   483 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   484 ;; Tracked objects:
   485 ;;		On entry : 0/0
   486 ;;		On exit  : 0/0
   487 ;;		Unchanged: 0/0
   488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   489 ;;      Params:         1       0       0       0       0       0       0       0       0
   490 ;;      Locals:         0       0       0       0       0       0       0       0       0
   491 ;;      Temps:          0       0       0       0       0       0       0       0       0
   492 ;;      Totals:         1       0       0       0       0       0       0       0       0
   493 ;;Total ram usage:        1 bytes
   494 ;; Hardware stack levels used: 1
   495 ;; Hardware stack levels required when called: 1
   496 ;; This function calls:
   497 ;;		_LCD_WriteChar
   498 ;; This function is called by:
   499 ;;		_main
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503                           	psect	text2
   504   00089C                     __ptext2:
   505                           	callstack 0
   506   00089C                     _LCD_WriteString:
   507                           	callstack 29
   508   00089C                     
   509                           ;./lcd.h: 56:     while (*str) {
   510   00089C  EF57  F004         	goto	l812
   511   0008A0                     l808:
   512                           
   513                           ;./lcd.h: 57:         LCD_WriteChar(*str++);
   514   0008A0  C003  FFF6         	movff	LCD_WriteString@str,tblptrl
   515   0008A4                     	if	0	;There is only one active tblptr byte
   516   0008A4                     	endif
   517   0008A4                     	if	0	;tblptru may be non-zero
   518   0008A4                     	endif
   519   0008A4                     	if	0	;tblptru may be non-zero
   520   0008A4                     	endif
   521   0008A4  0008               	tblrd		*
   522   0008A6  50F5               	movf	tablat,w,c
   523   0008A8  EC64  F004         	call	_LCD_WriteChar
   524   0008AC  2A03               	incf	LCD_WriteString@str^0,f,c
   525   0008AE                     l812:
   526                           
   527                           ;./lcd.h: 56:     while (*str) {
   528   0008AE  C003  FFF6         	movff	LCD_WriteString@str,tblptrl
   529   0008B2                     	if	0	;There is only one active tblptr byte
   530   0008B2                     	endif
   531   0008B2                     	if	0	;tblptru may be non-zero
   532   0008B2                     	endif
   533   0008B2                     	if	0	;tblptru may be non-zero
   534   0008B2                     	endif
   535   0008B2  0008               	tblrd		*
   536   0008B4  50F5               	movf	tablat,w,c
   537   0008B6  0900               	iorlw	0
   538   0008B8  A4D8               	btfss	status,2,c
   539   0008BA  EF61  F004         	goto	u71
   540   0008BE  EF63  F004         	goto	u70
   541   0008C2                     u71:
   542   0008C2  EF50  F004         	goto	l808
   543   0008C6                     u70:
   544   0008C6  0012               	return		;funcret
   545   0008C8                     __end_of_LCD_WriteString:
   546                           	callstack 0
   547                           
   548 ;; *************** function _LCD_WriteChar *****************
   549 ;; Defined at:
   550 ;;		line 43 in file "./lcd.h"
   551 ;; Parameters:    Size  Location     Type
   552 ;;  data            1    wreg     unsigned char 
   553 ;; Auto vars:     Size  Location     Type
   554 ;;  data            1    1[COMRAM] unsigned char 
   555 ;; Return value:  Size  Location     Type
   556 ;;                  1    wreg      void 
   557 ;; Registers used:
   558 ;;		wreg
   559 ;; Tracked objects:
   560 ;;		On entry : 0/0
   561 ;;		On exit  : 0/0
   562 ;;		Unchanged: 0/0
   563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   564 ;;      Params:         0       0       0       0       0       0       0       0       0
   565 ;;      Locals:         1       0       0       0       0       0       0       0       0
   566 ;;      Temps:          1       0       0       0       0       0       0       0       0
   567 ;;      Totals:         2       0       0       0       0       0       0       0       0
   568 ;;Total ram usage:        2 bytes
   569 ;; Hardware stack levels used: 1
   570 ;; This function calls:
   571 ;;		Nothing
   572 ;; This function is called by:
   573 ;;		_LCD_WriteString
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	text3
   578   0008C8                     __ptext3:
   579                           	callstack 0
   580   0008C8                     _LCD_WriteChar:
   581                           	callstack 29
   582                           
   583                           ;incstack = 0
   584                           ;LCD_WriteChar@data stored from wreg
   585   0008C8  6E02               	movwf	LCD_WriteChar@data^0,c
   586   0008CA                     
   587                           ;./lcd.h: 44:     PORTEbits.RE0 = 1;
   588   0008CA  8084               	bsf	132,0,c	;volatile
   589   0008CC                     
   590                           ;./lcd.h: 45:     PORTD = data;
   591   0008CC  C002  FF83         	movff	LCD_WriteChar@data,3971	;volatile
   592   0008D0                     
   593                           ;./lcd.h: 46:     PORTEbits.RE1 = 1;
   594   0008D0  8284               	bsf	132,1,c	;volatile
   595   0008D2                     
   596                           ;./lcd.h: 47:     _delay((unsigned long)((2)*(4000000/4000.0)));
   597   0008D2  0E03               	movlw	3
   598   0008D4  6E01               	movwf	??_LCD_WriteChar^0,c
   599   0008D6  0E98               	movlw	152
   600   0008D8                     u87:
   601   0008D8  2EE8               	decfsz	wreg,f,c
   602   0008DA  D7FE               	bra	u87
   603   0008DC  2E01               	decfsz	??_LCD_WriteChar^0,f,c
   604   0008DE  D7FC               	bra	u87
   605   0008E0                     
   606                           ;./lcd.h: 48:     PORTEbits.RE1 = 0;
   607   0008E0  9284               	bcf	132,1,c	;volatile
   608   0008E2                     
   609                           ;./lcd.h: 49:     _delay((unsigned long)((2)*(4000000/4000.0)));
   610   0008E2  0E03               	movlw	3
   611   0008E4  6E01               	movwf	??_LCD_WriteChar^0,c
   612   0008E6  0E98               	movlw	152
   613   0008E8                     u97:
   614   0008E8  2EE8               	decfsz	wreg,f,c
   615   0008EA  D7FE               	bra	u97
   616   0008EC  2E01               	decfsz	??_LCD_WriteChar^0,f,c
   617   0008EE  D7FC               	bra	u97
   618   0008F0  0012               	return		;funcret
   619   0008F2                     __end_of_LCD_WriteChar:
   620                           	callstack 0
   621                           
   622 ;; *************** function _LCD_SetCursor *****************
   623 ;; Defined at:
   624 ;;		line 33 in file "./lcd.h"
   625 ;; Parameters:    Size  Location     Type
   626 ;;  row             1    wreg     unsigned char 
   627 ;;  col             1    2[COMRAM] unsigned char 
   628 ;; Auto vars:     Size  Location     Type
   629 ;;  row             1    6[COMRAM] unsigned char 
   630 ;; Return value:  Size  Location     Type
   631 ;;                  1    wreg      void 
   632 ;; Registers used:
   633 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   639 ;;      Params:         1       0       0       0       0       0       0       0       0
   640 ;;      Locals:         1       0       0       0       0       0       0       0       0
   641 ;;      Temps:          3       0       0       0       0       0       0       0       0
   642 ;;      Totals:         5       0       0       0       0       0       0       0       0
   643 ;;Total ram usage:        5 bytes
   644 ;; Hardware stack levels used: 1
   645 ;; Hardware stack levels required when called: 1
   646 ;; This function calls:
   647 ;;		_LCD_Command
   648 ;; This function is called by:
   649 ;;		_main
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           	psect	text4
   654   000858                     __ptext4:
   655                           	callstack 0
   656   000858                     _LCD_SetCursor:
   657                           	callstack 29
   658                           
   659                           ;incstack = 0
   660                           ;LCD_SetCursor@row stored from wreg
   661   000858  6E07               	movwf	LCD_SetCursor@row^0,c
   662   00085A                     
   663                           ;./lcd.h: 34:     static const unsigned char row_offsets[] = {0x80, 0xC0, 0x90, 0xD0};;.
      +                          /lcd.h: 35:     if (row >= 1 && row <= 4) {
   664   00085A  5007               	movf	LCD_SetCursor@row^0,w,c
   665   00085C  B4D8               	btfsc	status,2,c
   666   00085E  EF33  F004         	goto	u51
   667   000862  EF35  F004         	goto	u50
   668   000866                     u51:
   669   000866  EF4D  F004         	goto	l25
   670   00086A                     u50:
   671   00086A  0E05               	movlw	5
   672   00086C  6007               	cpfslt	LCD_SetCursor@row^0,c
   673   00086E  EF3B  F004         	goto	u61
   674   000872  EF3D  F004         	goto	u60
   675   000876                     u61:
   676   000876  EF4D  F004         	goto	l25
   677   00087A                     u60:
   678   00087A                     
   679                           ;./lcd.h: 36:         LCD_Command(row_offsets[row - 1] + (col - 1));
   680   00087A  C007  F004         	movff	LCD_SetCursor@row,??_LCD_SetCursor
   681   00087E  0EFF               	movlw	255
   682   000880  2604               	addwf	??_LCD_SetCursor^0,f,c
   683   000882  5004               	movf	??_LCD_SetCursor^0,w,c
   684   000884  0F07               	addlw	low LCD_SetCursor@row_offsets
   685   000886  6E05               	movwf	(??_LCD_SetCursor+1)^0,c
   686   000888  C005  FFF6         	movff	??_LCD_SetCursor+1,tblptrl
   687   00088C                     	if	0	;There is only one active tblptr byte
   688   00088C                     	endif
   689   00088C                     	if	0	;tblptru may be non-zero
   690   00088C                     	endif
   691   00088C                     	if	0	;tblptru may be non-zero
   692   00088C                     	endif
   693   00088C  0008               	tblrd		*
   694   00088E  50F5               	movf	tablat,w,c
   695   000890  2403               	addwf	LCD_SetCursor@col^0,w,c
   696   000892  6E06               	movwf	(??_LCD_SetCursor+2)^0,c
   697   000894  0406               	decf	(??_LCD_SetCursor+2)^0,w,c
   698   000896  EC79  F004         	call	_LCD_Command
   699   00089A                     l25:
   700   00089A  0012               	return		;funcret
   701   00089C                     __end_of_LCD_SetCursor:
   702                           	callstack 0
   703                           
   704 ;; *************** function _LCD_Init *****************
   705 ;; Defined at:
   706 ;;		line 64 in file "./lcd.h"
   707 ;; Parameters:    Size  Location     Type
   708 ;;		None
   709 ;; Auto vars:     Size  Location     Type
   710 ;;  i               1    3[COMRAM] unsigned char 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   720 ;;      Params:         0       0       0       0       0       0       0       0       0
   721 ;;      Locals:         1       0       0       0       0       0       0       0       0
   722 ;;      Temps:          1       0       0       0       0       0       0       0       0
   723 ;;      Totals:         2       0       0       0       0       0       0       0       0
   724 ;;Total ram usage:        2 bytes
   725 ;; Hardware stack levels used: 1
   726 ;; Hardware stack levels required when called: 1
   727 ;; This function calls:
   728 ;;		_LCD_Command
   729 ;; This function is called by:
   730 ;;		_main
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           	psect	text5
   735   000810                     __ptext5:
   736                           	callstack 0
   737   000810                     _LCD_Init:
   738                           	callstack 29
   739   000810                     
   740                           ;./lcd.h: 65:     static const unsigned char init_seq[] = {0x38, 0x38, 0x38, 0x0C, 0x06,
      +                           0x01};;./lcd.h: 66:     ADCON1 = 0x0F;
   741   000810  0E0F               	movlw	15
   742   000812  6EC1               	movwf	193,c	;volatile
   743   000814                     
   744                           ;./lcd.h: 67:     PORTD = 0x00;
   745   000814  6A83               	clrf	131,c	;volatile
   746   000816                     
   747                           ;./lcd.h: 68:     PORTE &= 0xF8;
   748   000816  0EF8               	movlw	248
   749   000818  1684               	andwf	132,f,c	;volatile
   750   00081A                     
   751                           ;./lcd.h: 69:     TRISD = 0x00;
   752   00081A  6A95               	clrf	149,c	;volatile
   753   00081C                     
   754                           ;./lcd.h: 70:     TRISE &= 0xF8;
   755   00081C  0EF8               	movlw	248
   756   00081E  1696               	andwf	150,f,c	;volatile
   757   000820                     
   758                           ;./lcd.h: 72:     for (unsigned char i = 0; i < sizeof(init_seq); i++) {
   759   000820  6A04               	clrf	LCD_Init@i^0,c
   760   000822                     l782:
   761                           
   762                           ;./lcd.h: 73:         LCD_Command(init_seq[i]);
   763   000822  5004               	movf	LCD_Init@i^0,w,c
   764   000824  0F01               	addlw	low LCD_Init@init_seq
   765   000826  6E03               	movwf	??_LCD_Init^0,c
   766   000828  C003  FFF6         	movff	??_LCD_Init,tblptrl
   767   00082C                     	if	0	;There is only one active tblptr byte
   768   00082C                     	endif
   769   00082C                     	if	0	;tblptru may be non-zero
   770   00082C                     	endif
   771   00082C                     	if	0	;tblptru may be non-zero
   772   00082C                     	endif
   773   00082C  0008               	tblrd		*
   774   00082E  50F5               	movf	tablat,w,c
   775   000830  EC79  F004         	call	_LCD_Command
   776   000834                     
   777                           ;./lcd.h: 74:         _delay((unsigned long)((5)*(4000000/4000.0)));
   778   000834  0E07               	movlw	7
   779   000836  6E03               	movwf	??_LCD_Init^0,c
   780   000838  0E7D               	movlw	125
   781   00083A                     u107:
   782   00083A  2EE8               	decfsz	wreg,f,c
   783   00083C  D7FE               	bra	u107
   784   00083E  2E03               	decfsz	??_LCD_Init^0,f,c
   785   000840  D7FC               	bra	u107
   786   000842  0000               	nop	
   787   000844                     
   788                           ;./lcd.h: 75:     }
   789   000844  2A04               	incf	LCD_Init@i^0,f,c
   790   000846  0E05               	movlw	5
   791   000848  6404               	cpfsgt	LCD_Init@i^0,c
   792   00084A  EF29  F004         	goto	u41
   793   00084E  EF2B  F004         	goto	u40
   794   000852                     u41:
   795   000852  EF11  F004         	goto	l782
   796   000856                     u40:
   797   000856  0012               	return		;funcret
   798   000858                     __end_of_LCD_Init:
   799                           	callstack 0
   800                           
   801 ;; *************** function _LCD_Command *****************
   802 ;; Defined at:
   803 ;;		line 21 in file "./lcd.h"
   804 ;; Parameters:    Size  Location     Type
   805 ;;  cmd             1    wreg     unsigned char 
   806 ;; Auto vars:     Size  Location     Type
   807 ;;  cmd             1    1[COMRAM] unsigned char 
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		wreg
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   817 ;;      Params:         0       0       0       0       0       0       0       0       0
   818 ;;      Locals:         1       0       0       0       0       0       0       0       0
   819 ;;      Temps:          1       0       0       0       0       0       0       0       0
   820 ;;      Totals:         2       0       0       0       0       0       0       0       0
   821 ;;Total ram usage:        2 bytes
   822 ;; Hardware stack levels used: 1
   823 ;; This function calls:
   824 ;;		Nothing
   825 ;; This function is called by:
   826 ;;		_LCD_SetCursor
   827 ;;		_LCD_Init
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text6
   832   0008F2                     __ptext6:
   833                           	callstack 0
   834   0008F2                     _LCD_Command:
   835                           	callstack 29
   836                           
   837                           ;incstack = 0
   838                           ;LCD_Command@cmd stored from wreg
   839   0008F2  6E02               	movwf	LCD_Command@cmd^0,c
   840   0008F4                     
   841                           ;./lcd.h: 22:     PORTEbits.RE0 = 0;
   842   0008F4  9084               	bcf	132,0,c	;volatile
   843   0008F6                     
   844                           ;./lcd.h: 23:     PORTD = cmd;
   845   0008F6  C002  FF83         	movff	LCD_Command@cmd,3971	;volatile
   846   0008FA                     
   847                           ;./lcd.h: 24:     PORTEbits.RE1 = 1;
   848   0008FA  8284               	bsf	132,1,c	;volatile
   849   0008FC                     
   850                           ;./lcd.h: 25:     _delay((unsigned long)((2)*(4000000/4000.0)));
   851   0008FC  0E03               	movlw	3
   852   0008FE  6E01               	movwf	??_LCD_Command^0,c
   853   000900  0E98               	movlw	152
   854   000902                     u117:
   855   000902  2EE8               	decfsz	wreg,f,c
   856   000904  D7FE               	bra	u117
   857   000906  2E01               	decfsz	??_LCD_Command^0,f,c
   858   000908  D7FC               	bra	u117
   859   00090A                     
   860                           ;./lcd.h: 26:     PORTEbits.RE1 = 0;
   861   00090A  9284               	bcf	132,1,c	;volatile
   862   00090C                     
   863                           ;./lcd.h: 27:     _delay((unsigned long)((2)*(4000000/4000.0)));
   864   00090C  0E03               	movlw	3
   865   00090E  6E01               	movwf	??_LCD_Command^0,c
   866   000910  0E98               	movlw	152
   867   000912                     u127:
   868   000912  2EE8               	decfsz	wreg,f,c
   869   000914  D7FE               	bra	u127
   870   000916  2E01               	decfsz	??_LCD_Command^0,f,c
   871   000918  D7FC               	bra	u127
   872   00091A  0012               	return		;funcret
   873   00091C                     __end_of_LCD_Command:
   874                           	callstack 0
   875                           
   876                           	psect	rparam
   877   000001                     ___rparam_used  equ	1
   878   000000                     ___param_bank   equ	0
   879   000000                     __Lparam        equ	__Lrparam
   880   000000                     __Hparam        equ	__Hrparam
   881                           
   882                           	psect	config
   883                           
   884                           ;Config register CONFIG1L @ 0x300000
   885                           ;	unspecified, using default values
   886                           ;	PLL Prescaler Selection bits
   887                           ;	PLLDIV = 0x0, unprogrammed default
   888                           ;	System Clock Postscaler Selection bits
   889                           ;	CPUDIV = 0x0, unprogrammed default
   890                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   891                           ;	USBDIV = 0x0, unprogrammed default
   892   300000                     	org	3145728
   893   300000  00                 	db	0
   894                           
   895                           ;Config register CONFIG1H @ 0x300001
   896                           ;	Oscillator Selection bits
   897                           ;	FOSC = HS, HS oscillator (HS)
   898                           ;	Fail-Safe Clock Monitor Enable bit
   899                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   900                           ;	Internal/External Oscillator Switchover bit
   901                           ;	IESO = OFF, Oscillator Switchover mode disabled
   902   300001                     	org	3145729
   903   300001  0C                 	db	12
   904                           
   905                           ;Config register CONFIG2L @ 0x300002
   906                           ;	Power-up Timer Enable bit
   907                           ;	PWRT = ON, PWRT enabled
   908                           ;	Brown-out Reset Enable bits
   909                           ;	BOR = 0x3, unprogrammed default
   910                           ;	Brown-out Reset Voltage bits
   911                           ;	BORV = 0, Maximum setting 4.59V
   912                           ;	USB Voltage Regulator Enable bit
   913                           ;	VREGEN = 0x0, unprogrammed default
   914   300002                     	org	3145730
   915   300002  06                 	db	6
   916                           
   917                           ;Config register CONFIG2H @ 0x300003
   918                           ;	Watchdog Timer Enable bit
   919                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   920                           ;	Watchdog Timer Postscale Select bits
   921                           ;	WDTPS = 128, 1:128
   922   300003                     	org	3145731
   923   300003  0E                 	db	14
   924                           
   925                           ; Padding undefined space
   926   300004                     	org	3145732
   927   300004  FF                 	db	255
   928                           
   929                           ;Config register CONFIG3H @ 0x300005
   930                           ;	CCP2 MUX bit
   931                           ;	CCP2MX = 0x1, unprogrammed default
   932                           ;	PORTB A/D Enable bit
   933                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   934                           ;	Low-Power Timer 1 Oscillator Enable bit
   935                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   936                           ;	MCLR Pin Enable bit
   937                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   938   300005                     	org	3145733
   939   300005  81                 	db	129
   940                           
   941                           ;Config register CONFIG4L @ 0x300006
   942                           ;	Stack Full/Underflow Reset Enable bit
   943                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
   944                           ;	Single-Supply ICSP Enable bit
   945                           ;	LVP = OFF, Single-Supply ICSP disabled
   946                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   947                           ;	ICPRT = 0x0, unprogrammed default
   948                           ;	Extended Instruction Set Enable bit
   949                           ;	XINST = 0x0, unprogrammed default
   950                           ;	Background Debugger Enable bit
   951                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
   952   300006                     	org	3145734
   953   300006  80                 	db	128
   954                           
   955                           ; Padding undefined space
   956   300007                     	org	3145735
   957   300007  FF                 	db	255
   958                           tosu	equ	0xFFF
   959                           tosh	equ	0xFFE
   960                           tosl	equ	0xFFD
   961                           stkptr	equ	0xFFC
   962                           pclatu	equ	0xFFB
   963                           pclath	equ	0xFFA
   964                           pcl	equ	0xFF9
   965                           tblptru	equ	0xFF8
   966                           tblptrh	equ	0xFF7
   967                           tblptrl	equ	0xFF6
   968                           tablat	equ	0xFF5
   969                           prodh	equ	0xFF4
   970                           prodl	equ	0xFF3
   971                           indf0	equ	0xFEF
   972                           postinc0	equ	0xFEE
   973                           postdec0	equ	0xFED
   974                           preinc0	equ	0xFEC
   975                           plusw0	equ	0xFEB
   976                           fsr0h	equ	0xFEA
   977                           fsr0l	equ	0xFE9
   978                           wreg	equ	0xFE8
   979                           indf1	equ	0xFE7
   980                           postinc1	equ	0xFE6
   981                           postdec1	equ	0xFE5
   982                           preinc1	equ	0xFE4
   983                           plusw1	equ	0xFE3
   984                           fsr1h	equ	0xFE2
   985                           fsr1l	equ	0xFE1
   986                           bsr	equ	0xFE0
   987                           indf2	equ	0xFDF
   988                           postinc2	equ	0xFDE
   989                           postdec2	equ	0xFDD
   990                           preinc2	equ	0xFDC
   991                           plusw2	equ	0xFDB
   992                           fsr2h	equ	0xFDA
   993                           fsr2l	equ	0xFD9
   994                           status	equ	0xFD8

Data Sizes:
    Strings     4
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7       7
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    LCD_WriteString@str	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 


Critical Paths under _main in COMRAM

    _main->_LCD_SetCursor
    _LCD_WriteString->_LCD_WriteChar
    _LCD_SetCursor->_LCD_Command
    _LCD_Init->_LCD_Command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     246
                           _LCD_Init
                      _LCD_SetCursor
                    _LCD_WriteString
                         _init_ports
 ---------------------------------------------------------------------------------
 (1) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      1     0      1      61
                                              2 COMRAM     1     0      1
                      _LCD_WriteChar
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteChar                                        2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_SetCursor                                        5     4      1     125
                                              2 COMRAM     5     4      1
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      60
                                              2 COMRAM     2     2      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Command
   _LCD_SetCursor
     _LCD_Command
   _LCD_WriteString
     _LCD_WriteChar
   _init_ports

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMRAM           95      0       0      0.0%
BITBANK0           160      0       0      0.0%
BITBANK1           256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BITBIGSFRh         123      0       0      0.0%
BITBIGSFRl          35      0       0      0.0%
COMRAM              95      7       7      7.4%
BANK0              160      0       0      0.0%
BANK1              256      0       0      0.0%
BANK2              256      0       0      0.0%
BANK3              256      0       0      0.0%
BANK4              256      0       0      0.0%
BANK5              256      0       0      0.0%
BANK6              256      0       0      0.0%
BANK7              256      0       0      0.0%
BIGRAM            2047      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       7      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu May 29 11:07:00 2025

                    ?_LCD_Command 0001                                l41 0856                                l25 089A  
                              l34 08C6                                l19 091A                                l28 08F0  
                              l52 0954                                l46 0936                                l47 0936  
                              u40 0856                                u41 0852                                u50 086A  
                              u51 0866                                u60 087A                                u61 0876  
                              u70 08C6                                u71 08C2                                u87 08D8  
                              u97 08E8                     _LCD_SetCursor 0858                               l800 085A  
                             l730 08F6                               l802 086A                               l810 08AC  
                             l732 08FA                               l804 087A                               l740 08CA  
                             l812 08AE                               l820 092E                               l734 08FC  
                             l750 08E2                               l742 08CC                               l806 089C  
                             l814 091C                               l736 090A                               l728 08F4  
                             l744 08D0                               l808 08A0                               l816 0920  
                             l738 090C                               l770 0816                               l746 08D2  
                             l818 0924                               l772 081A                               l748 08E0  
                             l782 0822                               l774 081C                               l766 0810  
                             l790 094C                               l784 0834                               l776 0820  
                             l768 0814                               l786 0844                               l788 0846  
                             u107 083A                               u117 0902                               u127 0912  
                             wreg 0FE8                 ??_LCD_WriteString 0004                              STR_1 080B  
              LCD_WriteString@str 0003                              _main 091C                  LCD_Init@init_seq 0801  
                            start 7FFC                     _LCD_WriteChar 08C8                      ___param_bank 0000  
                __end_of_LCD_Init 0858                    ?_LCD_SetCursor 0003                             ?_main 0001  
                           _PORTD 0F83                             _PORTE 0F84                             _TRISD 0F95  
                           _TRISE 0F96                             tablat 0FF5                             status 0FD8  
                  ?_LCD_WriteChar 0001                   __initialization 093E                      __end_of_main 093E  
                          ??_main 0008                     __activetblptr 0001                            _ADCON1 0FC1  
                 ??_LCD_SetCursor 0004                            isa$std 0001                      __mediumconst 0800  
                          tblptrh 0FF7                            tblptrl 0FF6                            tblptru 0FF8  
                      __accesstop 0060           __end_of__initialization 093E                         ?_LCD_Init 0001  
                 ??_LCD_WriteChar 0001                     ___rparam_used 0001  __end_ofLCD_SetCursor@row_offsets 080B  
                       LCD_Init@i 0004                    __pcstackCOMRAM 0001                   _LCD_WriteString 089C  
        __end_ofLCD_Init@init_seq 0807                        ??_LCD_Init 0003           __end_of_LCD_WriteString 08C8  
                         __Hparam 0000                           __Lparam 0000                 LCD_WriteChar@data 0002  
                    __psmallconst 0800          LCD_SetCursor@row_offsets 0807                           __pcinit 093E  
                      _init_ports 094C                           __ramtop 0800                           __ptext0 091C  
                         __ptext1 094C                           __ptext2 089C                           __ptext3 08C8  
                         __ptext4 0858                           __ptext5 0810                           __ptext6 08F2  
            end_of_initialization 093E                  LCD_SetCursor@col 0003                  LCD_SetCursor@row 0007  
                  LCD_Command@cmd 0002                         _PORTEbits 0F84                  ?_LCD_WriteString 0003  
                   ??_LCD_Command 0001             __end_of_LCD_SetCursor 089C                       ?_init_ports 0001  
             start_initialization 093E             __end_of_LCD_WriteChar 08F2               __end_of_LCD_Command 091C  
                     __smallconst 0800                          _LCD_Init 0810                       _LCD_Command 08F2  
                        __Hrparam 0000                          __Lrparam 0000                      __Lsmallconst 0800  
                    ??_init_ports 0001                __end_of_init_ports 0956                          isa$xinst 0000  
