

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu May 29 10:51:30 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    18   000000                     
    19                           ; Generated 17/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4550 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53   000FE0                     bsr             equ	4064
    54   000FE9                     fsr0            equ	4073
    55   000FEA                     fsr0h           equ	4074
    56   000FE9                     fsr0l           equ	4073
    57   000FE1                     fsr1            equ	4065
    58   000FE2                     fsr1h           equ	4066
    59   000FE1                     fsr1l           equ	4065
    60   000FD9                     fsr2            equ	4057
    61   000FDA                     fsr2h           equ	4058
    62   000FD9                     fsr2l           equ	4057
    63   000FEF                     indf0           equ	4079
    64   000FE7                     indf1           equ	4071
    65   000FDF                     indf2           equ	4063
    66   000FF2                     intcon          equ	4082
    67   000000                     nvmcon          equ	0
    68   000FF9                     pcl             equ	4089
    69   000FFA                     pclath          equ	4090
    70   000FFB                     pclatu          equ	4091
    71   000FEB                     plusw0          equ	4075
    72   000FE3                     plusw1          equ	4067
    73   000FDB                     plusw2          equ	4059
    74   000FED                     postdec0        equ	4077
    75   000FE5                     postdec1        equ	4069
    76   000FDD                     postdec2        equ	4061
    77   000FEE                     postinc0        equ	4078
    78   000FE6                     postinc1        equ	4070
    79   000FDE                     postinc2        equ	4062
    80   000FEC                     preinc0         equ	4076
    81   000FE4                     preinc1         equ	4068
    82   000FDC                     preinc2         equ	4060
    83   000FF3                     prod            equ	4083
    84   000FF4                     prodh           equ	4084
    85   000FF3                     prodl           equ	4083
    86   000FD8                     status          equ	4056
    87   000FF5                     tablat          equ	4085
    88   000FF6                     tblptr          equ	4086
    89   000FF7                     tblptrh         equ	4087
    90   000FF6                     tblptrl         equ	4086
    91   000FF8                     tblptru         equ	4088
    92   000FFD                     tosl            equ	4093
    93   000FE8                     wreg            equ	4072
    94   000F62                     SPPDATA         equ	3938	;# 
    95   000F63                     SPPCFG          equ	3939	;# 
    96   000F64                     SPPEPS          equ	3940	;# 
    97   000F65                     SPPCON          equ	3941	;# 
    98   000F66                     UFRM            equ	3942	;# 
    99   000F66                     UFRML           equ	3942	;# 
   100   000F67                     UFRMH           equ	3943	;# 
   101   000F68                     UIR             equ	3944	;# 
   102   000F69                     UIE             equ	3945	;# 
   103   000F6A                     UEIR            equ	3946	;# 
   104   000F6B                     UEIE            equ	3947	;# 
   105   000F6C                     USTAT           equ	3948	;# 
   106   000F6D                     UCON            equ	3949	;# 
   107   000F6E                     UADDR           equ	3950	;# 
   108   000F6F                     UCFG            equ	3951	;# 
   109   000F70                     UEP0            equ	3952	;# 
   110   000F71                     UEP1            equ	3953	;# 
   111   000F72                     UEP2            equ	3954	;# 
   112   000F73                     UEP3            equ	3955	;# 
   113   000F74                     UEP4            equ	3956	;# 
   114   000F75                     UEP5            equ	3957	;# 
   115   000F76                     UEP6            equ	3958	;# 
   116   000F77                     UEP7            equ	3959	;# 
   117   000F78                     UEP8            equ	3960	;# 
   118   000F79                     UEP9            equ	3961	;# 
   119   000F7A                     UEP10           equ	3962	;# 
   120   000F7B                     UEP11           equ	3963	;# 
   121   000F7C                     UEP12           equ	3964	;# 
   122   000F7D                     UEP13           equ	3965	;# 
   123   000F7E                     UEP14           equ	3966	;# 
   124   000F7F                     UEP15           equ	3967	;# 
   125   000F80                     PORTA           equ	3968	;# 
   126   000F81                     PORTB           equ	3969	;# 
   127   000F82                     PORTC           equ	3970	;# 
   128   000F83                     PORTD           equ	3971	;# 
   129   000F84                     PORTE           equ	3972	;# 
   130   000F89                     LATA            equ	3977	;# 
   131   000F8A                     LATB            equ	3978	;# 
   132   000F8B                     LATC            equ	3979	;# 
   133   000F8C                     LATD            equ	3980	;# 
   134   000F8D                     LATE            equ	3981	;# 
   135   000F92                     TRISA           equ	3986	;# 
   136   000F92                     DDRA            equ	3986	;# 
   137   000F93                     TRISB           equ	3987	;# 
   138   000F93                     DDRB            equ	3987	;# 
   139   000F94                     TRISC           equ	3988	;# 
   140   000F94                     DDRC            equ	3988	;# 
   141   000F95                     TRISD           equ	3989	;# 
   142   000F95                     DDRD            equ	3989	;# 
   143   000F96                     TRISE           equ	3990	;# 
   144   000F96                     DDRE            equ	3990	;# 
   145   000F9B                     OSCTUNE         equ	3995	;# 
   146   000F9D                     PIE1            equ	3997	;# 
   147   000F9E                     PIR1            equ	3998	;# 
   148   000F9F                     IPR1            equ	3999	;# 
   149   000FA0                     PIE2            equ	4000	;# 
   150   000FA1                     PIR2            equ	4001	;# 
   151   000FA2                     IPR2            equ	4002	;# 
   152   000FA6                     EECON1          equ	4006	;# 
   153   000FA7                     EECON2          equ	4007	;# 
   154   000FA8                     EEDATA          equ	4008	;# 
   155   000FA9                     EEADR           equ	4009	;# 
   156   000FAB                     RCSTA           equ	4011	;# 
   157   000FAB                     RCSTA1          equ	4011	;# 
   158   000FAC                     TXSTA           equ	4012	;# 
   159   000FAC                     TXSTA1          equ	4012	;# 
   160   000FAD                     TXREG           equ	4013	;# 
   161   000FAD                     TXREG1          equ	4013	;# 
   162   000FAE                     RCREG           equ	4014	;# 
   163   000FAE                     RCREG1          equ	4014	;# 
   164   000FAF                     SPBRG           equ	4015	;# 
   165   000FAF                     SPBRG1          equ	4015	;# 
   166   000FB0                     SPBRGH          equ	4016	;# 
   167   000FB1                     T3CON           equ	4017	;# 
   168   000FB2                     TMR3            equ	4018	;# 
   169   000FB2                     TMR3L           equ	4018	;# 
   170   000FB3                     TMR3H           equ	4019	;# 
   171   000FB4                     CMCON           equ	4020	;# 
   172   000FB5                     CVRCON          equ	4021	;# 
   173   000FB6                     ECCP1AS         equ	4022	;# 
   174   000FB6                     CCP1AS          equ	4022	;# 
   175   000FB7                     ECCP1DEL        equ	4023	;# 
   176   000FB7                     CCP1DEL         equ	4023	;# 
   177   000FB8                     BAUDCON         equ	4024	;# 
   178   000FB8                     BAUDCTL         equ	4024	;# 
   179   000FBA                     CCP2CON         equ	4026	;# 
   180   000FBB                     CCPR2           equ	4027	;# 
   181   000FBB                     CCPR2L          equ	4027	;# 
   182   000FBC                     CCPR2H          equ	4028	;# 
   183   000FBD                     CCP1CON         equ	4029	;# 
   184   000FBD                     ECCP1CON        equ	4029	;# 
   185   000FBE                     CCPR1           equ	4030	;# 
   186   000FBE                     CCPR1L          equ	4030	;# 
   187   000FBF                     CCPR1H          equ	4031	;# 
   188   000FC0                     ADCON2          equ	4032	;# 
   189   000FC1                     ADCON1          equ	4033	;# 
   190   000FC2                     ADCON0          equ	4034	;# 
   191   000FC3                     ADRES           equ	4035	;# 
   192   000FC3                     ADRESL          equ	4035	;# 
   193   000FC4                     ADRESH          equ	4036	;# 
   194   000FC5                     SSPCON2         equ	4037	;# 
   195   000FC6                     SSPCON1         equ	4038	;# 
   196   000FC7                     SSPSTAT         equ	4039	;# 
   197   000FC8                     SSPADD          equ	4040	;# 
   198   000FC9                     SSPBUF          equ	4041	;# 
   199   000FCA                     T2CON           equ	4042	;# 
   200   000FCB                     PR2             equ	4043	;# 
   201   000FCB                     MEMCON          equ	4043	;# 
   202   000FCC                     TMR2            equ	4044	;# 
   203   000FCD                     T1CON           equ	4045	;# 
   204   000FCE                     TMR1            equ	4046	;# 
   205   000FCE                     TMR1L           equ	4046	;# 
   206   000FCF                     TMR1H           equ	4047	;# 
   207   000FD0                     RCON            equ	4048	;# 
   208   000FD1                     WDTCON          equ	4049	;# 
   209   000FD2                     HLVDCON         equ	4050	;# 
   210   000FD2                     LVDCON          equ	4050	;# 
   211   000FD3                     OSCCON          equ	4051	;# 
   212   000FD5                     T0CON           equ	4053	;# 
   213   000FD6                     TMR0            equ	4054	;# 
   214   000FD6                     TMR0L           equ	4054	;# 
   215   000FD7                     TMR0H           equ	4055	;# 
   216   000FD8                     STATUS          equ	4056	;# 
   217   000FD9                     FSR2            equ	4057	;# 
   218   000FD9                     FSR2L           equ	4057	;# 
   219   000FDA                     FSR2H           equ	4058	;# 
   220   000FDB                     PLUSW2          equ	4059	;# 
   221   000FDC                     PREINC2         equ	4060	;# 
   222   000FDD                     POSTDEC2        equ	4061	;# 
   223   000FDE                     POSTINC2        equ	4062	;# 
   224   000FDF                     INDF2           equ	4063	;# 
   225   000FE0                     BSR             equ	4064	;# 
   226   000FE1                     FSR1            equ	4065	;# 
   227   000FE1                     FSR1L           equ	4065	;# 
   228   000FE2                     FSR1H           equ	4066	;# 
   229   000FE3                     PLUSW1          equ	4067	;# 
   230   000FE4                     PREINC1         equ	4068	;# 
   231   000FE5                     POSTDEC1        equ	4069	;# 
   232   000FE6                     POSTINC1        equ	4070	;# 
   233   000FE7                     INDF1           equ	4071	;# 
   234   000FE8                     WREG            equ	4072	;# 
   235   000FE9                     FSR0            equ	4073	;# 
   236   000FE9                     FSR0L           equ	4073	;# 
   237   000FEA                     FSR0H           equ	4074	;# 
   238   000FEB                     PLUSW0          equ	4075	;# 
   239   000FEC                     PREINC0         equ	4076	;# 
   240   000FED                     POSTDEC0        equ	4077	;# 
   241   000FEE                     POSTINC0        equ	4078	;# 
   242   000FEF                     INDF0           equ	4079	;# 
   243   000FF0                     INTCON3         equ	4080	;# 
   244   000FF1                     INTCON2         equ	4081	;# 
   245   000FF2                     INTCON          equ	4082	;# 
   246   000FF3                     PROD            equ	4083	;# 
   247   000FF3                     PRODL           equ	4083	;# 
   248   000FF4                     PRODH           equ	4084	;# 
   249   000FF5                     TABLAT          equ	4085	;# 
   250   000FF6                     TBLPTR          equ	4086	;# 
   251   000FF6                     TBLPTRL         equ	4086	;# 
   252   000FF7                     TBLPTRH         equ	4087	;# 
   253   000FF8                     TBLPTRU         equ	4088	;# 
   254   000FF9                     PCLAT           equ	4089	;# 
   255   000FF9                     PC              equ	4089	;# 
   256   000FF9                     PCL             equ	4089	;# 
   257   000FFA                     PCLATH          equ	4090	;# 
   258   000FFB                     PCLATU          equ	4091	;# 
   259   000FFC                     STKPTR          equ	4092	;# 
   260   000FFD                     TOS             equ	4093	;# 
   261   000FFD                     TOSL            equ	4093	;# 
   262   000FFE                     TOSH            equ	4094	;# 
   263   000FFF                     TOSU            equ	4095	;# 
   264                           
   265                           	psect	smallconst
   266   000800                     __psmallconst:
   267                           	callstack 0
   268   000800  00                 	db	0
   269   000801                     LCD_Init@init_seq:
   270                           	callstack 0
   271   000801  38                 	db	56
   272   000802  38                 	db	56
   273   000803  38                 	db	56
   274   000804  0C                 	db	12
   275   000805  06                 	db	6
   276   000806  01                 	db	1
   277   000807                     __end_ofLCD_Init@init_seq:
   278                           	callstack 0
   279   000807                     LCD_SetCursor@row_offsets:
   280                           	callstack 0
   281   000807  80                 	db	128
   282   000808  C0                 	db	192
   283   000809  90                 	db	144
   284   00080A  D0                 	db	208
   285   00080B                     __end_ofLCD_SetCursor@row_offsets:
   286                           	callstack 0
   287   000F96                     _TRISE          set	3990
   288   000F95                     _TRISD          set	3989
   289   000F84                     _PORTE          set	3972
   290   000FC1                     _ADCON1         set	4033
   291   000F83                     _PORTD          set	3971
   292   000F84                     _PORTEbits      set	3972
   293   00080B                     STR_1:
   294   00080B  48                 	db	72	;'H'
   295   00080C  65                 	db	101	;'e'
   296   00080D  6C                 	db	108	;'l'
   297   00080E  6C                 	db	108	;'l'
   298   00080F  6F                 	db	111	;'o'
   299   000810  20                 	db	32
   300   000811  77                 	db	119	;'w'
   301   000812  6F                 	db	111	;'o'
   302   000813  72                 	db	114	;'r'
   303   000814  64                 	db	100	;'d'
   304   000815  00                 	db	0
   305   000816  00                 	db	0	; dummy byte at the end
   306   000800                     __smallconst    set	__psmallconst
   307   000800                     __mediumconst   set	__psmallconst
   308   000001                     __activetblptr  equ	1
   309                           
   310                           ; #config settings
   311                           
   312                           	psect	cinit
   313   000946                     __pcinit:
   314                           	callstack 0
   315   000946                     start_initialization:
   316                           	callstack 0
   317   000946                     __initialization:
   318                           	callstack 0
   319   000946                     end_of_initialization:
   320                           	callstack 0
   321   000946                     __end_of__initialization:
   322                           	callstack 0
   323   000946  0E00               	movlw	low (__Lsmallconst shr (0+16))
   324   000948  6EF8               	movwf	tblptru,c
   325   00094A  0E08               	movlw	high __Lsmallconst
   326   00094C  6EF7               	movwf	tblptrh,c
   327   00094E  0100               	movlb	0
   328   000950  EF92  F004         	goto	_main	;jump to C main() function
   329                           
   330                           	psect	cstackCOMRAM
   331   000001                     __pcstackCOMRAM:
   332                           	callstack 0
   333   000001                     ??_LCD_Command:
   334   000001                     ??_LCD_WriteChar:
   335                           
   336                           ; 1 bytes @ 0x0
   337   000001                     	ds	1
   338   000002                     LCD_Command@cmd:
   339                           	callstack 0
   340   000002                     LCD_WriteChar@data:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0x1
   344   000002                     	ds	1
   345   000003                     LCD_SetCursor@col:
   346                           	callstack 0
   347   000003                     LCD_WriteString@str:
   348                           	callstack 0
   349   000003                     ??_LCD_Init:
   350                           
   351                           ; 1 bytes @ 0x2
   352   000003                     	ds	1
   353   000004                     LCD_Init@i:
   354                           	callstack 0
   355   000004                     ??_LCD_SetCursor:
   356   000004                     
   357                           ; 1 bytes @ 0x3
   358   000004                     	ds	3
   359   000007                     LCD_SetCursor@row:
   360                           	callstack 0
   361                           
   362                           ; 1 bytes @ 0x6
   363   000007                     	ds	1
   364   000008                     
   365                           ; 1 bytes @ 0x7
   366 ;;
   367 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   368 ;;
   369 ;; *************** function _main *****************
   370 ;; Defined at:
   371 ;;		line 9 in file "testedopic.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;		None
   374 ;; Auto vars:     Size  Location     Type
   375 ;;		None
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      void 
   378 ;; Registers used:
   379 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   385 ;;      Params:         0       0       0       0       0       0       0       0       0
   386 ;;      Locals:         0       0       0       0       0       0       0       0       0
   387 ;;      Temps:          0       0       0       0       0       0       0       0       0
   388 ;;      Totals:         0       0       0       0       0       0       0       0       0
   389 ;;Total ram usage:        0 bytes
   390 ;; Hardware stack levels required when called: 2
   391 ;; This function calls:
   392 ;;		_LCD_Init
   393 ;;		_LCD_SetCursor
   394 ;;		_LCD_WriteString
   395 ;;		_init_ports
   396 ;; This function is called by:
   397 ;;		Startup code after reset
   398 ;; This function uses a non-reentrant model
   399 ;;
   400                           
   401                           	psect	text0
   402   000924                     __ptext0:
   403                           	callstack 0
   404   000924                     _main:
   405                           	callstack 29
   406   000924                     
   407                           ;testedopic.c: 10:     init_ports();
   408   000924  ECAA  F004         	call	_init_ports	;wreg free
   409   000928                     
   410                           ;testedopic.c: 12:     LCD_Init();
   411   000928  EC0C  F004         	call	_LCD_Init	;wreg free
   412   00092C                     
   413                           ;testedopic.c: 13:     LCD_SetCursor(1, 2);
   414   00092C  0E02               	movlw	2
   415   00092E  6E03               	movwf	LCD_SetCursor@col^0,c
   416   000930  0E01               	movlw	1
   417   000932  EC30  F004         	call	_LCD_SetCursor
   418   000936                     
   419                           ;testedopic.c: 14:     LCD_WriteString("Hello word");
   420   000936  0E0B               	movlw	low STR_1
   421   000938  6E03               	movwf	LCD_WriteString@str^0,c
   422   00093A  EC52  F004         	call	_LCD_WriteString	;wreg free
   423   00093E                     l46:
   424   00093E  EF9F  F004         	goto	l46
   425   000942  EFFE  F03F         	goto	start
   426   000946                     __end_of_main:
   427                           	callstack 0
   428                           
   429 ;; *************** function _init_ports *****************
   430 ;; Defined at:
   431 ;;		line 22 in file "testedopic.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;		None
   434 ;; Auto vars:     Size  Location     Type
   435 ;;		None
   436 ;; Return value:  Size  Location     Type
   437 ;;                  1    wreg      void 
   438 ;; Registers used:
   439 ;;		None
   440 ;; Tracked objects:
   441 ;;		On entry : 0/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   445 ;;      Params:         0       0       0       0       0       0       0       0       0
   446 ;;      Locals:         0       0       0       0       0       0       0       0       0
   447 ;;      Temps:          0       0       0       0       0       0       0       0       0
   448 ;;      Totals:         0       0       0       0       0       0       0       0       0
   449 ;;Total ram usage:        0 bytes
   450 ;; Hardware stack levels used: 1
   451 ;; This function calls:
   452 ;;		Nothing
   453 ;; This function is called by:
   454 ;;		_main
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           	psect	text1
   459   000954                     __ptext1:
   460                           	callstack 0
   461   000954                     _init_ports:
   462                           	callstack 30
   463   000954                     
   464                           ;testedopic.c: 23:     TRISD = 0x00;
   465   000954  6A95               	clrf	149,c	;volatile
   466                           
   467                           ;testedopic.c: 24:     TRISE = 0x00;
   468   000956  6A96               	clrf	150,c	;volatile
   469                           
   470                           ;testedopic.c: 25:     PORTD = 0x00;
   471   000958  6A83               	clrf	131,c	;volatile
   472                           
   473                           ;testedopic.c: 26:     PORTE = 0x00;
   474   00095A  6A84               	clrf	132,c	;volatile
   475   00095C  0012               	return		;funcret
   476   00095E                     __end_of_init_ports:
   477                           	callstack 0
   478                           
   479 ;; *************** function _LCD_WriteString *****************
   480 ;; Defined at:
   481 ;;		line 55 in file "./lcd.h"
   482 ;; Parameters:    Size  Location     Type
   483 ;;  str             1    2[COMRAM] PTR const unsigned char 
   484 ;;		 -> STR_1(11), 
   485 ;; Auto vars:     Size  Location     Type
   486 ;;		None
   487 ;; Return value:  Size  Location     Type
   488 ;;                  1    wreg      void 
   489 ;; Registers used:
   490 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   491 ;; Tracked objects:
   492 ;;		On entry : 0/0
   493 ;;		On exit  : 0/0
   494 ;;		Unchanged: 0/0
   495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   496 ;;      Params:         1       0       0       0       0       0       0       0       0
   497 ;;      Locals:         0       0       0       0       0       0       0       0       0
   498 ;;      Temps:          0       0       0       0       0       0       0       0       0
   499 ;;      Totals:         1       0       0       0       0       0       0       0       0
   500 ;;Total ram usage:        1 bytes
   501 ;; Hardware stack levels used: 1
   502 ;; Hardware stack levels required when called: 1
   503 ;; This function calls:
   504 ;;		_LCD_WriteChar
   505 ;; This function is called by:
   506 ;;		_main
   507 ;; This function uses a non-reentrant model
   508 ;;
   509                           
   510                           	psect	text2
   511   0008A4                     __ptext2:
   512                           	callstack 0
   513   0008A4                     _LCD_WriteString:
   514                           	callstack 29
   515   0008A4                     
   516                           ;./lcd.h: 56:     while (*str) {
   517   0008A4  EF5B  F004         	goto	l812
   518   0008A8                     l808:
   519                           
   520                           ;./lcd.h: 57:         LCD_WriteChar(*str++);
   521   0008A8  C003  FFF6         	movff	LCD_WriteString@str,tblptrl
   522   0008AC                     	if	0	;There is only one active tblptr byte
   523   0008AC                     	endif
   524   0008AC                     	if	0	;tblptru may be non-zero
   525   0008AC                     	endif
   526   0008AC                     	if	0	;tblptru may be non-zero
   527   0008AC                     	endif
   528   0008AC  0008               	tblrd		*
   529   0008AE  50F5               	movf	tablat,w,c
   530   0008B0  EC68  F004         	call	_LCD_WriteChar
   531   0008B4  2A03               	incf	LCD_WriteString@str^0,f,c
   532   0008B6                     l812:
   533                           
   534                           ;./lcd.h: 56:     while (*str) {
   535   0008B6  C003  FFF6         	movff	LCD_WriteString@str,tblptrl
   536   0008BA                     	if	0	;There is only one active tblptr byte
   537   0008BA                     	endif
   538   0008BA                     	if	0	;tblptru may be non-zero
   539   0008BA                     	endif
   540   0008BA                     	if	0	;tblptru may be non-zero
   541   0008BA                     	endif
   542   0008BA  0008               	tblrd		*
   543   0008BC  50F5               	movf	tablat,w,c
   544   0008BE  0900               	iorlw	0
   545   0008C0  A4D8               	btfss	status,2,c
   546   0008C2  EF65  F004         	goto	u71
   547   0008C6  EF67  F004         	goto	u70
   548   0008CA                     u71:
   549   0008CA  EF54  F004         	goto	l808
   550   0008CE                     u70:
   551   0008CE  0012               	return		;funcret
   552   0008D0                     __end_of_LCD_WriteString:
   553                           	callstack 0
   554                           
   555 ;; *************** function _LCD_WriteChar *****************
   556 ;; Defined at:
   557 ;;		line 43 in file "./lcd.h"
   558 ;; Parameters:    Size  Location     Type
   559 ;;  data            1    wreg     unsigned char 
   560 ;; Auto vars:     Size  Location     Type
   561 ;;  data            1    1[COMRAM] unsigned char 
   562 ;; Return value:  Size  Location     Type
   563 ;;                  1    wreg      void 
   564 ;; Registers used:
   565 ;;		wreg
   566 ;; Tracked objects:
   567 ;;		On entry : 0/0
   568 ;;		On exit  : 0/0
   569 ;;		Unchanged: 0/0
   570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   571 ;;      Params:         0       0       0       0       0       0       0       0       0
   572 ;;      Locals:         1       0       0       0       0       0       0       0       0
   573 ;;      Temps:          1       0       0       0       0       0       0       0       0
   574 ;;      Totals:         2       0       0       0       0       0       0       0       0
   575 ;;Total ram usage:        2 bytes
   576 ;; Hardware stack levels used: 1
   577 ;; This function calls:
   578 ;;		Nothing
   579 ;; This function is called by:
   580 ;;		_LCD_WriteString
   581 ;; This function uses a non-reentrant model
   582 ;;
   583                           
   584                           	psect	text3
   585   0008D0                     __ptext3:
   586                           	callstack 0
   587   0008D0                     _LCD_WriteChar:
   588                           	callstack 29
   589                           
   590                           ;incstack = 0
   591                           ;LCD_WriteChar@data stored from wreg
   592   0008D0  6E02               	movwf	LCD_WriteChar@data^0,c
   593   0008D2                     
   594                           ;./lcd.h: 44:     PORTEbits.RE0 = 1;
   595   0008D2  8084               	bsf	132,0,c	;volatile
   596   0008D4                     
   597                           ;./lcd.h: 45:     PORTD = data;
   598   0008D4  C002  FF83         	movff	LCD_WriteChar@data,3971	;volatile
   599   0008D8                     
   600                           ;./lcd.h: 46:     PORTEbits.RE1 = 1;
   601   0008D8  8284               	bsf	132,1,c	;volatile
   602   0008DA                     
   603                           ;./lcd.h: 47:     _delay((unsigned long)((2)*(4000000/4000.0)));
   604   0008DA  0E03               	movlw	3
   605   0008DC  6E01               	movwf	??_LCD_WriteChar^0,c
   606   0008DE  0E98               	movlw	152
   607   0008E0                     u87:
   608   0008E0  2EE8               	decfsz	wreg,f,c
   609   0008E2  D7FE               	bra	u87
   610   0008E4  2E01               	decfsz	??_LCD_WriteChar^0,f,c
   611   0008E6  D7FC               	bra	u87
   612   0008E8                     
   613                           ;./lcd.h: 48:     PORTEbits.RE1 = 0;
   614   0008E8  9284               	bcf	132,1,c	;volatile
   615   0008EA                     
   616                           ;./lcd.h: 49:     _delay((unsigned long)((2)*(4000000/4000.0)));
   617   0008EA  0E03               	movlw	3
   618   0008EC  6E01               	movwf	??_LCD_WriteChar^0,c
   619   0008EE  0E98               	movlw	152
   620   0008F0                     u97:
   621   0008F0  2EE8               	decfsz	wreg,f,c
   622   0008F2  D7FE               	bra	u97
   623   0008F4  2E01               	decfsz	??_LCD_WriteChar^0,f,c
   624   0008F6  D7FC               	bra	u97
   625   0008F8  0012               	return		;funcret
   626   0008FA                     __end_of_LCD_WriteChar:
   627                           	callstack 0
   628                           
   629 ;; *************** function _LCD_SetCursor *****************
   630 ;; Defined at:
   631 ;;		line 33 in file "./lcd.h"
   632 ;; Parameters:    Size  Location     Type
   633 ;;  row             1    wreg     unsigned char 
   634 ;;  col             1    2[COMRAM] unsigned char 
   635 ;; Auto vars:     Size  Location     Type
   636 ;;  row             1    6[COMRAM] unsigned char 
   637 ;; Return value:  Size  Location     Type
   638 ;;                  1    wreg      void 
   639 ;; Registers used:
   640 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   646 ;;      Params:         1       0       0       0       0       0       0       0       0
   647 ;;      Locals:         1       0       0       0       0       0       0       0       0
   648 ;;      Temps:          3       0       0       0       0       0       0       0       0
   649 ;;      Totals:         5       0       0       0       0       0       0       0       0
   650 ;;Total ram usage:        5 bytes
   651 ;; Hardware stack levels used: 1
   652 ;; Hardware stack levels required when called: 1
   653 ;; This function calls:
   654 ;;		_LCD_Command
   655 ;; This function is called by:
   656 ;;		_main
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           	psect	text4
   661   000860                     __ptext4:
   662                           	callstack 0
   663   000860                     _LCD_SetCursor:
   664                           	callstack 29
   665                           
   666                           ;incstack = 0
   667                           ;LCD_SetCursor@row stored from wreg
   668   000860  6E07               	movwf	LCD_SetCursor@row^0,c
   669   000862                     
   670                           ;./lcd.h: 34:     static const unsigned char row_offsets[] = {0x80, 0xC0, 0x90, 0xD0};;.
      +                          /lcd.h: 35:     if (row >= 1 && row <= 4) {
   671   000862  5007               	movf	LCD_SetCursor@row^0,w,c
   672   000864  B4D8               	btfsc	status,2,c
   673   000866  EF37  F004         	goto	u51
   674   00086A  EF39  F004         	goto	u50
   675   00086E                     u51:
   676   00086E  EF51  F004         	goto	l25
   677   000872                     u50:
   678   000872  0E05               	movlw	5
   679   000874  6007               	cpfslt	LCD_SetCursor@row^0,c
   680   000876  EF3F  F004         	goto	u61
   681   00087A  EF41  F004         	goto	u60
   682   00087E                     u61:
   683   00087E  EF51  F004         	goto	l25
   684   000882                     u60:
   685   000882                     
   686                           ;./lcd.h: 36:         LCD_Command(row_offsets[row - 1] + (col - 1));
   687   000882  C007  F004         	movff	LCD_SetCursor@row,??_LCD_SetCursor
   688   000886  0EFF               	movlw	255
   689   000888  2604               	addwf	??_LCD_SetCursor^0,f,c
   690   00088A  5004               	movf	??_LCD_SetCursor^0,w,c
   691   00088C  0F07               	addlw	low LCD_SetCursor@row_offsets
   692   00088E  6E05               	movwf	(??_LCD_SetCursor+1)^0,c
   693   000890  C005  FFF6         	movff	??_LCD_SetCursor+1,tblptrl
   694   000894                     	if	0	;There is only one active tblptr byte
   695   000894                     	endif
   696   000894                     	if	0	;tblptru may be non-zero
   697   000894                     	endif
   698   000894                     	if	0	;tblptru may be non-zero
   699   000894                     	endif
   700   000894  0008               	tblrd		*
   701   000896  50F5               	movf	tablat,w,c
   702   000898  2403               	addwf	LCD_SetCursor@col^0,w,c
   703   00089A  6E06               	movwf	(??_LCD_SetCursor+2)^0,c
   704   00089C  0406               	decf	(??_LCD_SetCursor+2)^0,w,c
   705   00089E  EC7D  F004         	call	_LCD_Command
   706   0008A2                     l25:
   707   0008A2  0012               	return		;funcret
   708   0008A4                     __end_of_LCD_SetCursor:
   709                           	callstack 0
   710                           
   711 ;; *************** function _LCD_Init *****************
   712 ;; Defined at:
   713 ;;		line 64 in file "./lcd.h"
   714 ;; Parameters:    Size  Location     Type
   715 ;;		None
   716 ;; Auto vars:     Size  Location     Type
   717 ;;  i               1    3[COMRAM] unsigned char 
   718 ;; Return value:  Size  Location     Type
   719 ;;                  1    wreg      void 
   720 ;; Registers used:
   721 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   722 ;; Tracked objects:
   723 ;;		On entry : 0/0
   724 ;;		On exit  : 0/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   727 ;;      Params:         0       0       0       0       0       0       0       0       0
   728 ;;      Locals:         1       0       0       0       0       0       0       0       0
   729 ;;      Temps:          1       0       0       0       0       0       0       0       0
   730 ;;      Totals:         2       0       0       0       0       0       0       0       0
   731 ;;Total ram usage:        2 bytes
   732 ;; Hardware stack levels used: 1
   733 ;; Hardware stack levels required when called: 1
   734 ;; This function calls:
   735 ;;		_LCD_Command
   736 ;; This function is called by:
   737 ;;		_main
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741                           	psect	text5
   742   000818                     __ptext5:
   743                           	callstack 0
   744   000818                     _LCD_Init:
   745                           	callstack 29
   746   000818                     
   747                           ;./lcd.h: 65:     static const unsigned char init_seq[] = {0x38, 0x38, 0x38, 0x0C, 0x06,
      +                           0x01};;./lcd.h: 66:     ADCON1 = 0x0F;
   748   000818  0E0F               	movlw	15
   749   00081A  6EC1               	movwf	193,c	;volatile
   750   00081C                     
   751                           ;./lcd.h: 67:     PORTD = 0x00;
   752   00081C  6A83               	clrf	131,c	;volatile
   753   00081E                     
   754                           ;./lcd.h: 68:     PORTE &= 0xF8;
   755   00081E  0EF8               	movlw	248
   756   000820  1684               	andwf	132,f,c	;volatile
   757   000822                     
   758                           ;./lcd.h: 69:     TRISD = 0x00;
   759   000822  6A95               	clrf	149,c	;volatile
   760   000824                     
   761                           ;./lcd.h: 70:     TRISE &= 0xF8;
   762   000824  0EF8               	movlw	248
   763   000826  1696               	andwf	150,f,c	;volatile
   764   000828                     
   765                           ;./lcd.h: 72:     for (unsigned char i = 0; i < sizeof(init_seq); i++) {
   766   000828  6A04               	clrf	LCD_Init@i^0,c
   767   00082A                     l782:
   768                           
   769                           ;./lcd.h: 73:         LCD_Command(init_seq[i]);
   770   00082A  5004               	movf	LCD_Init@i^0,w,c
   771   00082C  0F01               	addlw	low LCD_Init@init_seq
   772   00082E  6E03               	movwf	??_LCD_Init^0,c
   773   000830  C003  FFF6         	movff	??_LCD_Init,tblptrl
   774   000834                     	if	0	;There is only one active tblptr byte
   775   000834                     	endif
   776   000834                     	if	0	;tblptru may be non-zero
   777   000834                     	endif
   778   000834                     	if	0	;tblptru may be non-zero
   779   000834                     	endif
   780   000834  0008               	tblrd		*
   781   000836  50F5               	movf	tablat,w,c
   782   000838  EC7D  F004         	call	_LCD_Command
   783   00083C                     
   784                           ;./lcd.h: 74:         _delay((unsigned long)((5)*(4000000/4000.0)));
   785   00083C  0E07               	movlw	7
   786   00083E  6E03               	movwf	??_LCD_Init^0,c
   787   000840  0E7D               	movlw	125
   788   000842                     u107:
   789   000842  2EE8               	decfsz	wreg,f,c
   790   000844  D7FE               	bra	u107
   791   000846  2E03               	decfsz	??_LCD_Init^0,f,c
   792   000848  D7FC               	bra	u107
   793   00084A  0000               	nop	
   794   00084C                     
   795                           ;./lcd.h: 75:     }
   796   00084C  2A04               	incf	LCD_Init@i^0,f,c
   797   00084E  0E05               	movlw	5
   798   000850  6404               	cpfsgt	LCD_Init@i^0,c
   799   000852  EF2D  F004         	goto	u41
   800   000856  EF2F  F004         	goto	u40
   801   00085A                     u41:
   802   00085A  EF15  F004         	goto	l782
   803   00085E                     u40:
   804   00085E  0012               	return		;funcret
   805   000860                     __end_of_LCD_Init:
   806                           	callstack 0
   807                           
   808 ;; *************** function _LCD_Command *****************
   809 ;; Defined at:
   810 ;;		line 21 in file "./lcd.h"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  cmd             1    wreg     unsigned char 
   813 ;; Auto vars:     Size  Location     Type
   814 ;;  cmd             1    1[COMRAM] unsigned char 
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		wreg
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   824 ;;      Params:         0       0       0       0       0       0       0       0       0
   825 ;;      Locals:         1       0       0       0       0       0       0       0       0
   826 ;;      Temps:          1       0       0       0       0       0       0       0       0
   827 ;;      Totals:         2       0       0       0       0       0       0       0       0
   828 ;;Total ram usage:        2 bytes
   829 ;; Hardware stack levels used: 1
   830 ;; This function calls:
   831 ;;		Nothing
   832 ;; This function is called by:
   833 ;;		_LCD_SetCursor
   834 ;;		_LCD_Init
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           	psect	text6
   839   0008FA                     __ptext6:
   840                           	callstack 0
   841   0008FA                     _LCD_Command:
   842                           	callstack 29
   843                           
   844                           ;incstack = 0
   845                           ;LCD_Command@cmd stored from wreg
   846   0008FA  6E02               	movwf	LCD_Command@cmd^0,c
   847   0008FC                     
   848                           ;./lcd.h: 22:     PORTEbits.RE0 = 0;
   849   0008FC  9084               	bcf	132,0,c	;volatile
   850   0008FE                     
   851                           ;./lcd.h: 23:     PORTD = cmd;
   852   0008FE  C002  FF83         	movff	LCD_Command@cmd,3971	;volatile
   853   000902                     
   854                           ;./lcd.h: 24:     PORTEbits.RE1 = 1;
   855   000902  8284               	bsf	132,1,c	;volatile
   856   000904                     
   857                           ;./lcd.h: 25:     _delay((unsigned long)((2)*(4000000/4000.0)));
   858   000904  0E03               	movlw	3
   859   000906  6E01               	movwf	??_LCD_Command^0,c
   860   000908  0E98               	movlw	152
   861   00090A                     u117:
   862   00090A  2EE8               	decfsz	wreg,f,c
   863   00090C  D7FE               	bra	u117
   864   00090E  2E01               	decfsz	??_LCD_Command^0,f,c
   865   000910  D7FC               	bra	u117
   866   000912                     
   867                           ;./lcd.h: 26:     PORTEbits.RE1 = 0;
   868   000912  9284               	bcf	132,1,c	;volatile
   869   000914                     
   870                           ;./lcd.h: 27:     _delay((unsigned long)((2)*(4000000/4000.0)));
   871   000914  0E03               	movlw	3
   872   000916  6E01               	movwf	??_LCD_Command^0,c
   873   000918  0E98               	movlw	152
   874   00091A                     u127:
   875   00091A  2EE8               	decfsz	wreg,f,c
   876   00091C  D7FE               	bra	u127
   877   00091E  2E01               	decfsz	??_LCD_Command^0,f,c
   878   000920  D7FC               	bra	u127
   879   000922  0012               	return		;funcret
   880   000924                     __end_of_LCD_Command:
   881                           	callstack 0
   882                           
   883                           	psect	rparam
   884   000001                     ___rparam_used  equ	1
   885   000000                     ___param_bank   equ	0
   886   000000                     __Lparam        equ	__Lrparam
   887   000000                     __Hparam        equ	__Hrparam
   888                           
   889                           	psect	config
   890                           
   891                           ;Config register CONFIG1L @ 0x300000
   892                           ;	unspecified, using default values
   893                           ;	PLL Prescaler Selection bits
   894                           ;	PLLDIV = 0x0, unprogrammed default
   895                           ;	System Clock Postscaler Selection bits
   896                           ;	CPUDIV = 0x0, unprogrammed default
   897                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   898                           ;	USBDIV = 0x0, unprogrammed default
   899   300000                     	org	3145728
   900   300000  00                 	db	0
   901                           
   902                           ;Config register CONFIG1H @ 0x300001
   903                           ;	Oscillator Selection bits
   904                           ;	FOSC = HS, HS oscillator (HS)
   905                           ;	Fail-Safe Clock Monitor Enable bit
   906                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   907                           ;	Internal/External Oscillator Switchover bit
   908                           ;	IESO = OFF, Oscillator Switchover mode disabled
   909   300001                     	org	3145729
   910   300001  0C                 	db	12
   911                           
   912                           ;Config register CONFIG2L @ 0x300002
   913                           ;	Power-up Timer Enable bit
   914                           ;	PWRT = ON, PWRT enabled
   915                           ;	Brown-out Reset Enable bits
   916                           ;	BOR = 0x3, unprogrammed default
   917                           ;	Brown-out Reset Voltage bits
   918                           ;	BORV = 0, Maximum setting 4.59V
   919                           ;	USB Voltage Regulator Enable bit
   920                           ;	VREGEN = 0x0, unprogrammed default
   921   300002                     	org	3145730
   922   300002  06                 	db	6
   923                           
   924                           ;Config register CONFIG2H @ 0x300003
   925                           ;	Watchdog Timer Enable bit
   926                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   927                           ;	Watchdog Timer Postscale Select bits
   928                           ;	WDTPS = 128, 1:128
   929   300003                     	org	3145731
   930   300003  0E                 	db	14
   931                           
   932                           ; Padding undefined space
   933   300004                     	org	3145732
   934   300004  FF                 	db	255
   935                           
   936                           ;Config register CONFIG3H @ 0x300005
   937                           ;	CCP2 MUX bit
   938                           ;	CCP2MX = 0x1, unprogrammed default
   939                           ;	PORTB A/D Enable bit
   940                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   941                           ;	Low-Power Timer 1 Oscillator Enable bit
   942                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   943                           ;	MCLR Pin Enable bit
   944                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   945   300005                     	org	3145733
   946   300005  81                 	db	129
   947                           
   948                           ;Config register CONFIG4L @ 0x300006
   949                           ;	Stack Full/Underflow Reset Enable bit
   950                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
   951                           ;	Single-Supply ICSP Enable bit
   952                           ;	LVP = OFF, Single-Supply ICSP disabled
   953                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   954                           ;	ICPRT = 0x0, unprogrammed default
   955                           ;	Extended Instruction Set Enable bit
   956                           ;	XINST = 0x0, unprogrammed default
   957                           ;	Background Debugger Enable bit
   958                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
   959   300006                     	org	3145734
   960   300006  80                 	db	128
   961                           
   962                           ; Padding undefined space
   963   300007                     	org	3145735
   964   300007  FF                 	db	255
   965                           tosu	equ	0xFFF
   966                           tosh	equ	0xFFE
   967                           tosl	equ	0xFFD
   968                           stkptr	equ	0xFFC
   969                           pclatu	equ	0xFFB
   970                           pclath	equ	0xFFA
   971                           pcl	equ	0xFF9
   972                           tblptru	equ	0xFF8
   973                           tblptrh	equ	0xFF7
   974                           tblptrl	equ	0xFF6
   975                           tablat	equ	0xFF5
   976                           prodh	equ	0xFF4
   977                           prodl	equ	0xFF3
   978                           indf0	equ	0xFEF
   979                           postinc0	equ	0xFEE
   980                           postdec0	equ	0xFED
   981                           preinc0	equ	0xFEC
   982                           plusw0	equ	0xFEB
   983                           fsr0h	equ	0xFEA
   984                           fsr0l	equ	0xFE9
   985                           wreg	equ	0xFE8
   986                           indf1	equ	0xFE7
   987                           postinc1	equ	0xFE6
   988                           postdec1	equ	0xFE5
   989                           preinc1	equ	0xFE4
   990                           plusw1	equ	0xFE3
   991                           fsr1h	equ	0xFE2
   992                           fsr1l	equ	0xFE1
   993                           bsr	equ	0xFE0
   994                           indf2	equ	0xFDF
   995                           postinc2	equ	0xFDE
   996                           postdec2	equ	0xFDD
   997                           preinc2	equ	0xFDC
   998                           plusw2	equ	0xFDB
   999                           fsr2h	equ	0xFDA
  1000                           fsr2l	equ	0xFD9
  1001                           status	equ	0xFD8

Data Sizes:
    Strings     11
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7       7
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    LCD_WriteString@str	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_LCD_SetCursor
    _LCD_WriteString->_LCD_WriteChar
    _LCD_SetCursor->_LCD_Command
    _LCD_Init->_LCD_Command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     246
                           _LCD_Init
                      _LCD_SetCursor
                    _LCD_WriteString
                         _init_ports
 ---------------------------------------------------------------------------------
 (1) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      1     0      1      61
                                              2 COMRAM     1     0      1
                      _LCD_WriteChar
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteChar                                        2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_SetCursor                                        5     4      1     125
                                              2 COMRAM     5     4      1
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      60
                                              2 COMRAM     2     2      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Command
   _LCD_SetCursor
     _LCD_Command
   _LCD_WriteString
     _LCD_WriteChar
   _init_ports

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMRAM           95      0       0      0.0%
BITBANK0           160      0       0      0.0%
BITBANK1           256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BITBIGSFRh         123      0       0      0.0%
BITBIGSFRl          35      0       0      0.0%
COMRAM              95      7       7      7.4%
BANK0              160      0       0      0.0%
BANK1              256      0       0      0.0%
BANK2              256      0       0      0.0%
BANK3              256      0       0      0.0%
BANK4              256      0       0      0.0%
BANK5              256      0       0      0.0%
BANK6              256      0       0      0.0%
BANK7              256      0       0      0.0%
BIGRAM            2047      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       7      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu May 29 10:51:30 2025

                    ?_LCD_Command 0001                                l41 085E                                l25 08A2  
                              l34 08CE                                l19 0922                                l28 08F8  
                              l52 095C                                l46 093E                                l47 093E  
                              u40 085E                                u41 085A                                u50 0872  
                              u51 086E                                u60 0882                                u61 087E  
                              u70 08CE                                u71 08CA                                u87 08E0  
                              u97 08F0                     _LCD_SetCursor 0860                               l800 0862  
                             l730 08FE                               l802 0872                               l810 08B4  
                             l732 0902                               l804 0882                               l740 08D2  
                             l812 08B6                               l820 0936                               l734 0904  
                             l750 08EA                               l742 08D4                               l806 08A4  
                             l814 0924                               l736 0912                               l728 08FC  
                             l744 08D8                               l808 08A8                               l816 0928  
                             l738 0914                               l770 081E                               l746 08DA  
                             l818 092C                               l772 0822                               l748 08E8  
                             l782 082A                               l774 0824                               l766 0818  
                             l790 0954                               l784 083C                               l776 0828  
                             l768 081C                               l786 084C                               l788 084E  
                             u107 0842                               u117 090A                               u127 091A  
                             wreg 0FE8                 ??_LCD_WriteString 0004                              STR_1 080B  
              LCD_WriteString@str 0003                              _main 0924                  LCD_Init@init_seq 0801  
                            start 7FFC                     _LCD_WriteChar 08D0                      ___param_bank 0000  
                __end_of_LCD_Init 0860                    ?_LCD_SetCursor 0003                             ?_main 0001  
                           _PORTD 0F83                             _PORTE 0F84                             _TRISD 0F95  
                           _TRISE 0F96                             tablat 0FF5                             status 0FD8  
                  ?_LCD_WriteChar 0001                   __initialization 0946                      __end_of_main 0946  
                          ??_main 0008                     __activetblptr 0001                            _ADCON1 0FC1  
                 ??_LCD_SetCursor 0004                            isa$std 0001                      __mediumconst 0800  
                          tblptrh 0FF7                            tblptrl 0FF6                            tblptru 0FF8  
                      __accesstop 0060           __end_of__initialization 0946                         ?_LCD_Init 0001  
                 ??_LCD_WriteChar 0001                     ___rparam_used 0001  __end_ofLCD_SetCursor@row_offsets 080B  
                       LCD_Init@i 0004                    __pcstackCOMRAM 0001                   _LCD_WriteString 08A4  
        __end_ofLCD_Init@init_seq 0807                        ??_LCD_Init 0003           __end_of_LCD_WriteString 08D0  
                         __Hparam 0000                           __Lparam 0000                 LCD_WriteChar@data 0002  
                    __psmallconst 0800          LCD_SetCursor@row_offsets 0807                           __pcinit 0946  
                      _init_ports 0954                           __ramtop 0800                           __ptext0 0924  
                         __ptext1 0954                           __ptext2 08A4                           __ptext3 08D0  
                         __ptext4 0860                           __ptext5 0818                           __ptext6 08FA  
            end_of_initialization 0946                  LCD_SetCursor@col 0003                  LCD_SetCursor@row 0007  
                  LCD_Command@cmd 0002                         _PORTEbits 0F84                  ?_LCD_WriteString 0003  
                   ??_LCD_Command 0001             __end_of_LCD_SetCursor 08A4                       ?_init_ports 0001  
             start_initialization 0946             __end_of_LCD_WriteChar 08FA               __end_of_LCD_Command 0924  
                     __smallconst 0800                          _LCD_Init 0818                       _LCD_Command 08FA  
                        __Hrparam 0000                          __Lrparam 0000                      __Lsmallconst 0800  
                    ??_init_ports 0001                __end_of_init_ports 095E                          isa$xinst 0000  
