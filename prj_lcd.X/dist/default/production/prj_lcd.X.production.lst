

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Apr 29 10:55:41 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 17/10/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000FE0                     bsr             equ	4064
    55   000FE9                     fsr0            equ	4073
    56   000FEA                     fsr0h           equ	4074
    57   000FE9                     fsr0l           equ	4073
    58   000FE1                     fsr1            equ	4065
    59   000FE2                     fsr1h           equ	4066
    60   000FE1                     fsr1l           equ	4065
    61   000FD9                     fsr2            equ	4057
    62   000FDA                     fsr2h           equ	4058
    63   000FD9                     fsr2l           equ	4057
    64   000FEF                     indf0           equ	4079
    65   000FE7                     indf1           equ	4071
    66   000FDF                     indf2           equ	4063
    67   000FF2                     intcon          equ	4082
    68   000000                     nvmcon          equ	0
    69   000FF9                     pcl             equ	4089
    70   000FFA                     pclath          equ	4090
    71   000FFB                     pclatu          equ	4091
    72   000FEB                     plusw0          equ	4075
    73   000FE3                     plusw1          equ	4067
    74   000FDB                     plusw2          equ	4059
    75   000FED                     postdec0        equ	4077
    76   000FE5                     postdec1        equ	4069
    77   000FDD                     postdec2        equ	4061
    78   000FEE                     postinc0        equ	4078
    79   000FE6                     postinc1        equ	4070
    80   000FDE                     postinc2        equ	4062
    81   000FEC                     preinc0         equ	4076
    82   000FE4                     preinc1         equ	4068
    83   000FDC                     preinc2         equ	4060
    84   000FF3                     prod            equ	4083
    85   000FF4                     prodh           equ	4084
    86   000FF3                     prodl           equ	4083
    87   000FD8                     status          equ	4056
    88   000FF5                     tablat          equ	4085
    89   000FF6                     tblptr          equ	4086
    90   000FF7                     tblptrh         equ	4087
    91   000FF6                     tblptrl         equ	4086
    92   000FF8                     tblptru         equ	4088
    93   000FFD                     tosl            equ	4093
    94   000FE8                     wreg            equ	4072
    95   000F62                     SPPDATA         equ	3938	;# 
    96   000F63                     SPPCFG          equ	3939	;# 
    97   000F64                     SPPEPS          equ	3940	;# 
    98   000F65                     SPPCON          equ	3941	;# 
    99   000F66                     UFRM            equ	3942	;# 
   100   000F66                     UFRML           equ	3942	;# 
   101   000F67                     UFRMH           equ	3943	;# 
   102   000F68                     UIR             equ	3944	;# 
   103   000F69                     UIE             equ	3945	;# 
   104   000F6A                     UEIR            equ	3946	;# 
   105   000F6B                     UEIE            equ	3947	;# 
   106   000F6C                     USTAT           equ	3948	;# 
   107   000F6D                     UCON            equ	3949	;# 
   108   000F6E                     UADDR           equ	3950	;# 
   109   000F6F                     UCFG            equ	3951	;# 
   110   000F70                     UEP0            equ	3952	;# 
   111   000F71                     UEP1            equ	3953	;# 
   112   000F72                     UEP2            equ	3954	;# 
   113   000F73                     UEP3            equ	3955	;# 
   114   000F74                     UEP4            equ	3956	;# 
   115   000F75                     UEP5            equ	3957	;# 
   116   000F76                     UEP6            equ	3958	;# 
   117   000F77                     UEP7            equ	3959	;# 
   118   000F78                     UEP8            equ	3960	;# 
   119   000F79                     UEP9            equ	3961	;# 
   120   000F7A                     UEP10           equ	3962	;# 
   121   000F7B                     UEP11           equ	3963	;# 
   122   000F7C                     UEP12           equ	3964	;# 
   123   000F7D                     UEP13           equ	3965	;# 
   124   000F7E                     UEP14           equ	3966	;# 
   125   000F7F                     UEP15           equ	3967	;# 
   126   000F80                     PORTA           equ	3968	;# 
   127   000F81                     PORTB           equ	3969	;# 
   128   000F82                     PORTC           equ	3970	;# 
   129   000F83                     PORTD           equ	3971	;# 
   130   000F84                     PORTE           equ	3972	;# 
   131   000F89                     LATA            equ	3977	;# 
   132   000F8A                     LATB            equ	3978	;# 
   133   000F8B                     LATC            equ	3979	;# 
   134   000F8C                     LATD            equ	3980	;# 
   135   000F8D                     LATE            equ	3981	;# 
   136   000F92                     TRISA           equ	3986	;# 
   137   000F92                     DDRA            equ	3986	;# 
   138   000F93                     TRISB           equ	3987	;# 
   139   000F93                     DDRB            equ	3987	;# 
   140   000F94                     TRISC           equ	3988	;# 
   141   000F94                     DDRC            equ	3988	;# 
   142   000F95                     TRISD           equ	3989	;# 
   143   000F95                     DDRD            equ	3989	;# 
   144   000F96                     TRISE           equ	3990	;# 
   145   000F96                     DDRE            equ	3990	;# 
   146   000F9B                     OSCTUNE         equ	3995	;# 
   147   000F9D                     PIE1            equ	3997	;# 
   148   000F9E                     PIR1            equ	3998	;# 
   149   000F9F                     IPR1            equ	3999	;# 
   150   000FA0                     PIE2            equ	4000	;# 
   151   000FA1                     PIR2            equ	4001	;# 
   152   000FA2                     IPR2            equ	4002	;# 
   153   000FA6                     EECON1          equ	4006	;# 
   154   000FA7                     EECON2          equ	4007	;# 
   155   000FA8                     EEDATA          equ	4008	;# 
   156   000FA9                     EEADR           equ	4009	;# 
   157   000FAB                     RCSTA           equ	4011	;# 
   158   000FAB                     RCSTA1          equ	4011	;# 
   159   000FAC                     TXSTA           equ	4012	;# 
   160   000FAC                     TXSTA1          equ	4012	;# 
   161   000FAD                     TXREG           equ	4013	;# 
   162   000FAD                     TXREG1          equ	4013	;# 
   163   000FAE                     RCREG           equ	4014	;# 
   164   000FAE                     RCREG1          equ	4014	;# 
   165   000FAF                     SPBRG           equ	4015	;# 
   166   000FAF                     SPBRG1          equ	4015	;# 
   167   000FB0                     SPBRGH          equ	4016	;# 
   168   000FB1                     T3CON           equ	4017	;# 
   169   000FB2                     TMR3            equ	4018	;# 
   170   000FB2                     TMR3L           equ	4018	;# 
   171   000FB3                     TMR3H           equ	4019	;# 
   172   000FB4                     CMCON           equ	4020	;# 
   173   000FB5                     CVRCON          equ	4021	;# 
   174   000FB6                     ECCP1AS         equ	4022	;# 
   175   000FB6                     CCP1AS          equ	4022	;# 
   176   000FB7                     ECCP1DEL        equ	4023	;# 
   177   000FB7                     CCP1DEL         equ	4023	;# 
   178   000FB8                     BAUDCON         equ	4024	;# 
   179   000FB8                     BAUDCTL         equ	4024	;# 
   180   000FBA                     CCP2CON         equ	4026	;# 
   181   000FBB                     CCPR2           equ	4027	;# 
   182   000FBB                     CCPR2L          equ	4027	;# 
   183   000FBC                     CCPR2H          equ	4028	;# 
   184   000FBD                     CCP1CON         equ	4029	;# 
   185   000FBD                     ECCP1CON        equ	4029	;# 
   186   000FBE                     CCPR1           equ	4030	;# 
   187   000FBE                     CCPR1L          equ	4030	;# 
   188   000FBF                     CCPR1H          equ	4031	;# 
   189   000FC0                     ADCON2          equ	4032	;# 
   190   000FC1                     ADCON1          equ	4033	;# 
   191   000FC2                     ADCON0          equ	4034	;# 
   192   000FC3                     ADRES           equ	4035	;# 
   193   000FC3                     ADRESL          equ	4035	;# 
   194   000FC4                     ADRESH          equ	4036	;# 
   195   000FC5                     SSPCON2         equ	4037	;# 
   196   000FC6                     SSPCON1         equ	4038	;# 
   197   000FC7                     SSPSTAT         equ	4039	;# 
   198   000FC8                     SSPADD          equ	4040	;# 
   199   000FC9                     SSPBUF          equ	4041	;# 
   200   000FCA                     T2CON           equ	4042	;# 
   201   000FCB                     PR2             equ	4043	;# 
   202   000FCB                     MEMCON          equ	4043	;# 
   203   000FCC                     TMR2            equ	4044	;# 
   204   000FCD                     T1CON           equ	4045	;# 
   205   000FCE                     TMR1            equ	4046	;# 
   206   000FCE                     TMR1L           equ	4046	;# 
   207   000FCF                     TMR1H           equ	4047	;# 
   208   000FD0                     RCON            equ	4048	;# 
   209   000FD1                     WDTCON          equ	4049	;# 
   210   000FD2                     HLVDCON         equ	4050	;# 
   211   000FD2                     LVDCON          equ	4050	;# 
   212   000FD3                     OSCCON          equ	4051	;# 
   213   000FD5                     T0CON           equ	4053	;# 
   214   000FD6                     TMR0            equ	4054	;# 
   215   000FD6                     TMR0L           equ	4054	;# 
   216   000FD7                     TMR0H           equ	4055	;# 
   217   000FD8                     STATUS          equ	4056	;# 
   218   000FD9                     FSR2            equ	4057	;# 
   219   000FD9                     FSR2L           equ	4057	;# 
   220   000FDA                     FSR2H           equ	4058	;# 
   221   000FDB                     PLUSW2          equ	4059	;# 
   222   000FDC                     PREINC2         equ	4060	;# 
   223   000FDD                     POSTDEC2        equ	4061	;# 
   224   000FDE                     POSTINC2        equ	4062	;# 
   225   000FDF                     INDF2           equ	4063	;# 
   226   000FE0                     BSR             equ	4064	;# 
   227   000FE1                     FSR1            equ	4065	;# 
   228   000FE1                     FSR1L           equ	4065	;# 
   229   000FE2                     FSR1H           equ	4066	;# 
   230   000FE3                     PLUSW1          equ	4067	;# 
   231   000FE4                     PREINC1         equ	4068	;# 
   232   000FE5                     POSTDEC1        equ	4069	;# 
   233   000FE6                     POSTINC1        equ	4070	;# 
   234   000FE7                     INDF1           equ	4071	;# 
   235   000FE8                     WREG            equ	4072	;# 
   236   000FE9                     FSR0            equ	4073	;# 
   237   000FE9                     FSR0L           equ	4073	;# 
   238   000FEA                     FSR0H           equ	4074	;# 
   239   000FEB                     PLUSW0          equ	4075	;# 
   240   000FEC                     PREINC0         equ	4076	;# 
   241   000FED                     POSTDEC0        equ	4077	;# 
   242   000FEE                     POSTINC0        equ	4078	;# 
   243   000FEF                     INDF0           equ	4079	;# 
   244   000FF0                     INTCON3         equ	4080	;# 
   245   000FF1                     INTCON2         equ	4081	;# 
   246   000FF2                     INTCON          equ	4082	;# 
   247   000FF3                     PROD            equ	4083	;# 
   248   000FF3                     PRODL           equ	4083	;# 
   249   000FF4                     PRODH           equ	4084	;# 
   250   000FF5                     TABLAT          equ	4085	;# 
   251   000FF6                     TBLPTR          equ	4086	;# 
   252   000FF6                     TBLPTRL         equ	4086	;# 
   253   000FF7                     TBLPTRH         equ	4087	;# 
   254   000FF8                     TBLPTRU         equ	4088	;# 
   255   000FF9                     PCLAT           equ	4089	;# 
   256   000FF9                     PC              equ	4089	;# 
   257   000FF9                     PCL             equ	4089	;# 
   258   000FFA                     PCLATH          equ	4090	;# 
   259   000FFB                     PCLATU          equ	4091	;# 
   260   000FFC                     STKPTR          equ	4092	;# 
   261   000FFD                     TOS             equ	4093	;# 
   262   000FFD                     TOSL            equ	4093	;# 
   263   000FFE                     TOSH            equ	4094	;# 
   264   000FFF                     TOSU            equ	4095	;# 
   265                           
   266                           	psect	idataCOMRAM
   267   000A02                     __pidataCOMRAM:
   268                           	callstack 0
   269                           
   270                           ;initializer for Inicializa_LCD@ini
   271   000A02  38                 	db	56
   272   000A03  38                 	db	56
   273   000A04  38                 	db	56
   274   000A05  0C                 	db	12
   275   000A06  06                 	db	6
   276   000A07  01                 	db	1
   277   000A08  00                 	db	0
   278   000F96                     _TRISE          set	3990
   279   000F95                     _TRISD          set	3989
   280   000F84                     _PORTE          set	3972
   281   000FC1                     _ADCON1         set	4033
   282   000F83                     _PORTD          set	3971
   283   000F84                     _PORTEbits      set	3972
   284                           
   285                           	psect	smallconst
   286   000800                     __psmallconst:
   287                           	callstack 0
   288   000800  00                 	db	0
   289   000801                     STR_1:
   290   000801  4F                 	db	79	;'O'
   291   000802  3D                 	db	61	;'='
   292   000803  7C                 	db	124
   293   000804  3D                 	db	61	;'='
   294   000805  3D                 	db	61	;'='
   295   000806  3D                 	db	61	;'='
   296   000807  3D                 	db	61	;'='
   297   000808  3E                 	db	62	;'>'
   298   000809  00                 	db	0
   299   00080A                     STR_2:
   300   00080A  4E                 	db	78	;'N'
   301   00080B  75                 	db	117	;'u'
   302   00080C  6E                 	db	110	;'n'
   303   00080D  65                 	db	101	;'e'
   304   00080E  73                 	db	115	;'s'
   305   00080F  00                 	db	0
   306   000810  00                 	db	0	; dummy byte at the end
   307   000800                     __smallconst    set	__psmallconst
   308   000800                     __mediumconst   set	__psmallconst
   309   000002                     __activetblptr  equ	2
   310                           
   311                           ; #config settings
   312                           
   313                           	psect	cinit
   314   0009D8                     __pcinit:
   315                           	callstack 0
   316   0009D8                     start_initialization:
   317                           	callstack 0
   318   0009D8                     __initialization:
   319                           	callstack 0
   320                           
   321                           ; Initialize objects allocated to COMRAM (7 bytes)
   322                           ; load TBLPTR registers with __pidataCOMRAM
   323   0009D8  0E02               	movlw	low __pidataCOMRAM
   324   0009DA  6EF6               	movwf	tblptrl,c
   325   0009DC  0E0A               	movlw	high __pidataCOMRAM
   326   0009DE  6EF7               	movwf	tblptrh,c
   327   0009E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   328   0009E2  6EF8               	movwf	tblptru,c
   329   0009E4  EE00  F001         	lfsr	0,__pdataCOMRAM
   330   0009E8  EE10 F007          	lfsr	1,7
   331   0009EC                     copy_data0:
   332   0009EC  0009               	tblrd		*+
   333   0009EE  CFF5 FFEE          	movff	tablat,postinc0
   334   0009F2  50E5               	movf	postdec1,w,c
   335   0009F4  50E1               	movf	fsr1l,w,c
   336   0009F6  E1FA               	bnz	copy_data0
   337   0009F8                     end_of_initialization:
   338                           	callstack 0
   339   0009F8                     __end_of__initialization:
   340                           	callstack 0
   341   0009F8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   342   0009FA  6EF8               	movwf	tblptru,c
   343   0009FC  0100               	movlb	0
   344   0009FE  EF41  F004         	goto	_main	;jump to C main() function
   345                           
   346                           	psect	dataCOMRAM
   347   000001                     __pdataCOMRAM:
   348                           	callstack 0
   349   000001                     Inicializa_LCD@ini:
   350                           	callstack 0
   351   000001                     	ds	7
   352                           
   353                           	psect	cstackCOMRAM
   354   000008                     __pcstackCOMRAM:
   355                           	callstack 0
   356   000008                     ??_Comando_LCD:
   357   000008                     ??_Escreve_C_LCD:
   358                           
   359                           ; 1 bytes @ 0x0
   360   000008                     	ds	1
   361   000009                     Comando_LCD@comando:
   362                           	callstack 0
   363   000009                     Escreve_C_LCD@caracter:
   364                           	callstack 0
   365                           
   366                           ; 1 bytes @ 0x1
   367   000009                     	ds	1
   368   00000A                     Posiciona_LCD@coluna:
   369                           	callstack 0
   370   00000A                     Escreve_LCD@caracter:
   371                           	callstack 0
   372   00000A                     ??_Inicializa_LCD:
   373                           
   374                           ; 1 bytes @ 0x2
   375   00000A                     	ds	1
   376   00000B                     Posiciona_LCD@linha:
   377                           	callstack 0
   378   00000B                     Inicializa_LCD@x:
   379                           	callstack 0
   380   00000B                     ??_Escreve_LCD:
   381                           
   382                           ; 1 bytes @ 0x3
   383   00000B                     	ds	1
   384   00000C                     Posiciona_LCD@x:
   385                           	callstack 0
   386                           
   387                           ; 1 bytes @ 0x4
   388   00000C                     	ds	1
   389   00000D                     ??_main:
   390                           
   391                           ; 1 bytes @ 0x5
   392   00000D                     	ds	2
   393                           
   394 ;;
   395 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   396 ;;
   397 ;; *************** function _main *****************
   398 ;; Defined at:
   399 ;;		line 7 in file "tela.c"
   400 ;; Parameters:    Size  Location     Type
   401 ;;		None
   402 ;; Auto vars:     Size  Location     Type
   403 ;;		None
   404 ;; Return value:  Size  Location     Type
   405 ;;                  1    wreg      void 
   406 ;; Registers used:
   407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   413 ;;      Params:         0       0       0       0       0       0       0       0       0
   414 ;;      Locals:         0       0       0       0       0       0       0       0       0
   415 ;;      Temps:          2       0       0       0       0       0       0       0       0
   416 ;;      Totals:         2       0       0       0       0       0       0       0       0
   417 ;;Total ram usage:        2 bytes
   418 ;; Hardware stack levels required when called: 2
   419 ;; This function calls:
   420 ;;		_Comando_LCD
   421 ;;		_Escreve_LCD
   422 ;;		_Inicializa_LCD
   423 ;;		_Posiciona_LCD
   424 ;; This function is called by:
   425 ;;		Startup code after reset
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429                           	psect	text0
   430   000882                     __ptext0:
   431                           	callstack 0
   432   000882                     _main:
   433                           	callstack 29
   434   000882                     
   435                           ;tela.c: 8:  PORTD = 0x00;
   436   000882  6A83               	clrf	131,c	;volatile
   437                           
   438                           ;tela.c: 9:     PORTE = 0x00;
   439   000884  6A84               	clrf	132,c	;volatile
   440                           
   441                           ;tela.c: 10:     TRISD = 0b00000000;
   442   000886  6A95               	clrf	149,c	;volatile
   443   000888                     
   444                           ;tela.c: 11:     TRISE = 0b11111100;
   445   000888  0EFC               	movlw	252
   446   00088A  6E96               	movwf	150,c	;volatile
   447   00088C                     
   448                           ;tela.c: 13:  Inicializa_LCD();
   449   00088C  EC6D  F004         	call	_Inicializa_LCD	;wreg free
   450   000890                     
   451                           ;tela.c: 14:  Comando_LCD (01);
   452   000890  0E01               	movlw	1
   453   000892  ECD6  F004         	call	_Comando_LCD
   454   000896                     
   455                           ;tela.c: 15:  Posiciona_LCD(1,6);
   456   000896  0E06               	movlw	6
   457   000898  6E0A               	movwf	Posiciona_LCD@coluna^0,c
   458   00089A  0E01               	movlw	1
   459   00089C  EC09  F004         	call	_Posiciona_LCD
   460   0008A0                     
   461                           ;tela.c: 16:  Escreve_LCD("O=|====>");
   462   0008A0  0E01               	movlw	low STR_1
   463   0008A2  6E0A               	movwf	Escreve_LCD@caracter^0,c
   464   0008A4  EC97  F004         	call	_Escreve_LCD	;wreg free
   465   0008A8                     
   466                           ;tela.c: 17:  Posiciona_LCD(2,7);
   467   0008A8  0E07               	movlw	7
   468   0008AA  6E0A               	movwf	Posiciona_LCD@coluna^0,c
   469   0008AC  0E02               	movlw	2
   470   0008AE  EC09  F004         	call	_Posiciona_LCD
   471   0008B2                     
   472                           ;tela.c: 18:  Escreve_LCD("Nunes");
   473   0008B2  0E0A               	movlw	low STR_2
   474   0008B4  6E0A               	movwf	Escreve_LCD@caracter^0,c
   475   0008B6  EC97  F004         	call	_Escreve_LCD	;wreg free
   476   0008BA                     
   477                           ;tela.c: 19:  _delay((unsigned long)((1000)*(4000000/4000.0)));
   478   0008BA  0E06               	movlw	6
   479   0008BC  6E0E               	movwf	(??_main+1)^0,c
   480   0008BE  0E13               	movlw	19
   481   0008C0  6E0D               	movwf	??_main^0,c
   482   0008C2  0EAE               	movlw	174
   483   0008C4                     u67:
   484   0008C4  2EE8               	decfsz	wreg,f,c
   485   0008C6  D7FE               	bra	u67
   486   0008C8  2E0D               	decfsz	??_main^0,f,c
   487   0008CA  D7FC               	bra	u67
   488   0008CC  2E0E               	decfsz	(??_main+1)^0,f,c
   489   0008CE  D7FA               	bra	u67
   490   0008D0                     
   491                           ;tela.c: 20:  Comando_LCD (01);
   492   0008D0  0E01               	movlw	1
   493   0008D2  ECD6  F004         	call	_Comando_LCD
   494   0008D6  EFFE  F03F         	goto	start
   495   0008DA                     __end_of_main:
   496                           	callstack 0
   497                           
   498 ;; *************** function _Posiciona_LCD *****************
   499 ;; Defined at:
   500 ;;		line 37 in file "./lcd.h"
   501 ;; Parameters:    Size  Location     Type
   502 ;;  linha           1    wreg     unsigned char 
   503 ;;  coluna          1    2[COMRAM] unsigned char 
   504 ;; Auto vars:     Size  Location     Type
   505 ;;  linha           1    3[COMRAM] unsigned char 
   506 ;;  x               1    4[COMRAM] unsigned char 
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, status,2, status,0, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   516 ;;      Params:         1       0       0       0       0       0       0       0       0
   517 ;;      Locals:         2       0       0       0       0       0       0       0       0
   518 ;;      Temps:          0       0       0       0       0       0       0       0       0
   519 ;;      Totals:         3       0       0       0       0       0       0       0       0
   520 ;;Total ram usage:        3 bytes
   521 ;; Hardware stack levels used: 1
   522 ;; Hardware stack levels required when called: 1
   523 ;; This function calls:
   524 ;;		_Comando_LCD
   525 ;; This function is called by:
   526 ;;		_main
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530                           	psect	text1
   531   000812                     __ptext1:
   532                           	callstack 0
   533   000812                     _Posiciona_LCD:
   534                           	callstack 29
   535                           
   536                           ;incstack = 0
   537                           ;Posiciona_LCD@linha stored from wreg
   538   000812  6E0B               	movwf	Posiciona_LCD@linha^0,c
   539   000814                     
   540                           ;./lcd.h: 38:    unsigned char x = 0;
   541   000814  6A0C               	clrf	Posiciona_LCD@x^0,c
   542   000816                     
   543                           ;./lcd.h: 39:    --coluna;
   544   000816  060A               	decf	Posiciona_LCD@coluna^0,f,c
   545                           
   546                           ;./lcd.h: 40:    switch (linha){
   547   000818  EF22  F004         	goto	l838
   548   00081C                     l828:
   549   00081C  500A               	movf	Posiciona_LCD@coluna^0,w,c
   550   00081E  0F80               	addlw	128
   551   000820  6E0C               	movwf	Posiciona_LCD@x^0,c
   552                           
   553                           ;./lcd.h: 42:                break;
   554   000822  EF35  F004         	goto	l840
   555   000826                     l830:
   556   000826  500A               	movf	Posiciona_LCD@coluna^0,w,c
   557   000828  0FC0               	addlw	192
   558   00082A  6E0C               	movwf	Posiciona_LCD@x^0,c
   559                           
   560                           ;./lcd.h: 44:                break;
   561   00082C  EF35  F004         	goto	l840
   562   000830                     l832:
   563   000830  500A               	movf	Posiciona_LCD@coluna^0,w,c
   564   000832  0F90               	addlw	144
   565   000834  6E0C               	movwf	Posiciona_LCD@x^0,c
   566                           
   567                           ;./lcd.h: 46:                break;
   568   000836  EF35  F004         	goto	l840
   569   00083A                     l834:
   570   00083A  500A               	movf	Posiciona_LCD@coluna^0,w,c
   571   00083C  0FD0               	addlw	208
   572   00083E  6E0C               	movwf	Posiciona_LCD@x^0,c
   573                           
   574                           ;./lcd.h: 48:                break;
   575   000840  EF35  F004         	goto	l840
   576   000844                     l838:
   577   000844  500B               	movf	Posiciona_LCD@linha^0,w,c
   578                           
   579                           ; Switch size 1, requested type "simple"
   580                           ; Number of cases is 4, Range of values is 1 to 4
   581                           ; switch strategies available:
   582                           ; Name         Instructions Cycles
   583                           ; simple_byte           13     7 (average)
   584                           ;	Chosen strategy is simple_byte
   585   000846  0A01               	xorlw	1	; case 1
   586   000848  B4D8               	btfsc	status,2,c
   587   00084A  EF0E  F004         	goto	l828
   588   00084E  0A03               	xorlw	3	; case 2
   589   000850  B4D8               	btfsc	status,2,c
   590   000852  EF13  F004         	goto	l830
   591   000856  0A01               	xorlw	1	; case 3
   592   000858  B4D8               	btfsc	status,2,c
   593   00085A  EF18  F004         	goto	l832
   594   00085E  0A07               	xorlw	7	; case 4
   595   000860  B4D8               	btfsc	status,2,c
   596   000862  EF1D  F004         	goto	l834
   597   000866  EF35  F004         	goto	l840
   598   00086A                     l840:
   599                           
   600                           ;./lcd.h: 51:    if (x != 0) Comando_LCD (x);
   601   00086A  500C               	movf	Posiciona_LCD@x^0,w,c
   602   00086C  B4D8               	btfsc	status,2,c
   603   00086E  EF3B  F004         	goto	u41
   604   000872  EF3D  F004         	goto	u40
   605   000876                     u41:
   606   000876  EF40  F004         	goto	l28
   607   00087A                     u40:
   608   00087A  500C               	movf	Posiciona_LCD@x^0,w,c
   609   00087C  ECD6  F004         	call	_Comando_LCD
   610   000880                     l28:
   611   000880  0012               	return		;funcret
   612   000882                     __end_of_Posiciona_LCD:
   613                           	callstack 0
   614                           
   615 ;; *************** function _Inicializa_LCD *****************
   616 ;; Defined at:
   617 ;;		line 85 in file "./lcd.h"
   618 ;; Parameters:    Size  Location     Type
   619 ;;		None
   620 ;; Auto vars:     Size  Location     Type
   621 ;;  x               1    3[COMRAM] unsigned char 
   622 ;; Return value:  Size  Location     Type
   623 ;;                  1    wreg      void 
   624 ;; Registers used:
   625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   626 ;; Tracked objects:
   627 ;;		On entry : 0/0
   628 ;;		On exit  : 0/0
   629 ;;		Unchanged: 0/0
   630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   631 ;;      Params:         0       0       0       0       0       0       0       0       0
   632 ;;      Locals:         1       0       0       0       0       0       0       0       0
   633 ;;      Temps:          1       0       0       0       0       0       0       0       0
   634 ;;      Totals:         2       0       0       0       0       0       0       0       0
   635 ;;Total ram usage:        2 bytes
   636 ;; Hardware stack levels used: 1
   637 ;; Hardware stack levels required when called: 1
   638 ;; This function calls:
   639 ;;		_Comando_LCD
   640 ;; This function is called by:
   641 ;;		_main
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           	psect	text2
   646   0008DA                     __ptext2:
   647                           	callstack 0
   648   0008DA                     _Inicializa_LCD:
   649                           	callstack 29
   650   0008DA                     
   651                           ;./lcd.h: 86:    unsigned char x = 0;
   652   0008DA  6A0B               	clrf	Inicializa_LCD@x^0,c
   653   0008DC                     
   654                           ;./lcd.h: 87:    static unsigned char ini [] = {0x38,0x38,0x38,0x0C,0x06,0x01,0x00};;./l
      +                          cd.h: 89:    ADCON1 = 0x0F;
   655   0008DC  0E0F               	movlw	15
   656   0008DE  6EC1               	movwf	193,c	;volatile
   657   0008E0                     
   658                           ;./lcd.h: 91:    PORTD = 0x00;
   659   0008E0  6A83               	clrf	131,c	;volatile
   660   0008E2                     
   661                           ;./lcd.h: 92:    PORTE = PORTE & 0xF8;
   662   0008E2  5084               	movf	132,w,c	;volatile
   663   0008E4  0BF8               	andlw	248
   664   0008E6  6E84               	movwf	132,c	;volatile
   665   0008E8                     
   666                           ;./lcd.h: 93:    TRISD = 0x00;
   667   0008E8  6A95               	clrf	149,c	;volatile
   668   0008EA                     
   669                           ;./lcd.h: 94:    TRISE = TRISE & 0xF8;
   670   0008EA  5096               	movf	150,w,c	;volatile
   671   0008EC  0BF8               	andlw	248
   672   0008EE  6E96               	movwf	150,c	;volatile
   673                           
   674                           ;./lcd.h: 96:    while (ini [x] != 0x00){
   675   0008F0  EF8A  F004         	goto	l800
   676   0008F4                     l794:
   677                           
   678                           ;./lcd.h: 97:       Comando_LCD (ini[x]);
   679   0008F4  500B               	movf	Inicializa_LCD@x^0,w,c
   680   0008F6  0F01               	addlw	low Inicializa_LCD@ini
   681   0008F8  6ED9               	movwf	fsr2l,c
   682   0008FA  6ADA               	clrf	fsr2h,c
   683   0008FC  50DF               	movf	indf2,w,c
   684   0008FE  ECD6  F004         	call	_Comando_LCD
   685   000902                     
   686                           ;./lcd.h: 98:       ++ x;
   687   000902  2A0B               	incf	Inicializa_LCD@x^0,f,c
   688   000904                     
   689                           ;./lcd.h: 99:       _delay((unsigned long)((5)*(4000000/4000.0)));
   690   000904  0E07               	movlw	7
   691   000906  6E0A               	movwf	??_Inicializa_LCD^0,c
   692   000908  0E7D               	movlw	125
   693   00090A                     u77:
   694   00090A  2EE8               	decfsz	wreg,f,c
   695   00090C  D7FE               	bra	u77
   696   00090E  2E0A               	decfsz	??_Inicializa_LCD^0,f,c
   697   000910  D7FC               	bra	u77
   698   000912  0000               	nop	
   699   000914                     l800:
   700                           
   701                           ;./lcd.h: 96:    while (ini [x] != 0x00){
   702   000914  500B               	movf	Inicializa_LCD@x^0,w,c
   703   000916  0F01               	addlw	low Inicializa_LCD@ini
   704   000918  6ED9               	movwf	fsr2l,c
   705   00091A  6ADA               	clrf	fsr2h,c
   706   00091C  50DF               	movf	indf2,w,c
   707   00091E  A4D8               	btfss	status,2,c
   708   000920  EF94  F004         	goto	u31
   709   000924  EF96  F004         	goto	u30
   710   000928                     u31:
   711   000928  EF7A  F004         	goto	l794
   712   00092C                     u30:
   713   00092C  0012               	return		;funcret
   714   00092E                     __end_of_Inicializa_LCD:
   715                           	callstack 0
   716                           
   717 ;; *************** function _Comando_LCD *****************
   718 ;; Defined at:
   719 ;;		line 23 in file "./lcd.h"
   720 ;; Parameters:    Size  Location     Type
   721 ;;  comando         1    wreg     unsigned char 
   722 ;; Auto vars:     Size  Location     Type
   723 ;;  comando         1    1[COMRAM] unsigned char 
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   733 ;;      Params:         0       0       0       0       0       0       0       0       0
   734 ;;      Locals:         1       0       0       0       0       0       0       0       0
   735 ;;      Temps:          1       0       0       0       0       0       0       0       0
   736 ;;      Totals:         2       0       0       0       0       0       0       0       0
   737 ;;Total ram usage:        2 bytes
   738 ;; Hardware stack levels used: 1
   739 ;; This function calls:
   740 ;;		Nothing
   741 ;; This function is called by:
   742 ;;		_Posiciona_LCD
   743 ;;		_Inicializa_LCD
   744 ;;		_main
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           	psect	text3
   749   0009AC                     __ptext3:
   750                           	callstack 0
   751   0009AC                     _Comando_LCD:
   752                           	callstack 29
   753                           
   754                           ;incstack = 0
   755                           ;Comando_LCD@comando stored from wreg
   756   0009AC  6E09               	movwf	Comando_LCD@comando^0,c
   757   0009AE                     
   758                           ;./lcd.h: 24:    PORTEbits.RE0 = 0;
   759   0009AE  9084               	bcf	132,0,c	;volatile
   760   0009B0                     
   761                           ;./lcd.h: 27:    PORTD = comando;
   762   0009B0  C009  FF83         	movff	Comando_LCD@comando,3971	;volatile
   763   0009B4                     
   764                           ;./lcd.h: 28:    PORTEbits.RE1 = 1;
   765   0009B4  8284               	bsf	132,1,c	;volatile
   766   0009B6                     
   767                           ;./lcd.h: 29:    _delay((unsigned long)((5)*(4000000/4000.0)));
   768   0009B6  0E07               	movlw	7
   769   0009B8  6E08               	movwf	??_Comando_LCD^0,c
   770   0009BA  0E7D               	movlw	125
   771   0009BC                     u87:
   772   0009BC  2EE8               	decfsz	wreg,f,c
   773   0009BE  D7FE               	bra	u87
   774   0009C0  2E08               	decfsz	??_Comando_LCD^0,f,c
   775   0009C2  D7FC               	bra	u87
   776   0009C4  0000               	nop	
   777   0009C6                     
   778                           ;./lcd.h: 30:    PORTEbits.RE1 = 0;
   779   0009C6  9284               	bcf	132,1,c	;volatile
   780   0009C8                     
   781                           ;./lcd.h: 31:    _delay((unsigned long)((10)*(4000000/4000.0)));
   782   0009C8  0E0D               	movlw	13
   783   0009CA  6E08               	movwf	??_Comando_LCD^0,c
   784   0009CC  0EFC               	movlw	252
   785   0009CE                     u97:
   786   0009CE  2EE8               	decfsz	wreg,f,c
   787   0009D0  D7FE               	bra	u97
   788   0009D2  2E08               	decfsz	??_Comando_LCD^0,f,c
   789   0009D4  D7FC               	bra	u97
   790   0009D6  0012               	return		;funcret
   791   0009D8                     __end_of_Comando_LCD:
   792                           	callstack 0
   793                           
   794 ;; *************** function _Escreve_LCD *****************
   795 ;; Defined at:
   796 ;;		line 73 in file "./lcd.h"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  caracter        1    2[COMRAM] PTR unsigned char 
   799 ;;		 -> STR_2(6), STR_1(9), 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;		None
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   811 ;;      Params:         1       0       0       0       0       0       0       0       0
   812 ;;      Locals:         0       0       0       0       0       0       0       0       0
   813 ;;      Temps:          1       0       0       0       0       0       0       0       0
   814 ;;      Totals:         2       0       0       0       0       0       0       0       0
   815 ;;Total ram usage:        2 bytes
   816 ;; Hardware stack levels used: 1
   817 ;; Hardware stack levels required when called: 1
   818 ;; This function calls:
   819 ;;		_Escreve_C_LCD
   820 ;; This function is called by:
   821 ;;		_main
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text4
   826   00092E                     __ptext4:
   827                           	callstack 0
   828   00092E                     _Escreve_LCD:
   829                           	callstack 29
   830   00092E                     
   831                           ;./lcd.h: 74:    while (*caracter != '\0'){
   832   00092E  EFA9  F004         	goto	l852
   833   000932                     l846:
   834                           
   835                           ;./lcd.h: 75:       Escreve_C_LCD (*caracter);
   836   000932  C00A  FFF6         	movff	Escreve_LCD@caracter,tblptrl
   837   000936                     	if	1	;There is more than 1 active tblptr byte
   838   000936  0E08               	movlw	high __smallconst
   839   000938  6EF7               	movwf	tblptrh,c
   840   00093A                     	endif
   841   00093A                     	if	0	;tblptru may be non-zero
   842   00093A                     	endif
   843   00093A                     	if	0	;tblptru may be non-zero
   844   00093A                     	endif
   845   00093A  0008               	tblrd		*
   846   00093C  50F5               	movf	tablat,w,c
   847   00093E  ECB8  F004         	call	_Escreve_C_LCD
   848   000942                     
   849                           ;./lcd.h: 76:       ++caracter;
   850   000942  2A0A               	incf	Escreve_LCD@caracter^0,f,c
   851   000944                     
   852                           ;./lcd.h: 77:       _delay((unsigned long)((10)*(4000000/4000.0)));
   853   000944  0E0D               	movlw	13
   854   000946  6E0B               	movwf	??_Escreve_LCD^0,c
   855   000948  0EFC               	movlw	252
   856   00094A                     u107:
   857   00094A  2EE8               	decfsz	wreg,f,c
   858   00094C  D7FE               	bra	u107
   859   00094E  2E0B               	decfsz	??_Escreve_LCD^0,f,c
   860   000950  D7FC               	bra	u107
   861   000952                     l852:
   862                           
   863                           ;./lcd.h: 74:    while (*caracter != '\0'){
   864   000952  C00A  FFF6         	movff	Escreve_LCD@caracter,tblptrl
   865   000956                     	if	1	;There is more than 1 active tblptr byte
   866   000956  0E08               	movlw	high __smallconst
   867   000958  6EF7               	movwf	tblptrh,c
   868   00095A                     	endif
   869   00095A                     	if	0	;tblptru may be non-zero
   870   00095A                     	endif
   871   00095A                     	if	0	;tblptru may be non-zero
   872   00095A                     	endif
   873   00095A  0008               	tblrd		*
   874   00095C  50F5               	movf	tablat,w,c
   875   00095E  0900               	iorlw	0
   876   000960  A4D8               	btfss	status,2,c
   877   000962  EFB5  F004         	goto	u51
   878   000966  EFB7  F004         	goto	u50
   879   00096A                     u51:
   880   00096A  EF99  F004         	goto	l846
   881   00096E                     u50:
   882   00096E  0012               	return		;funcret
   883   000970                     __end_of_Escreve_LCD:
   884                           	callstack 0
   885                           
   886 ;; *************** function _Escreve_C_LCD *****************
   887 ;; Defined at:
   888 ;;		line 57 in file "./lcd.h"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  caracter        1    wreg     unsigned char 
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  caracter        1    1[COMRAM] unsigned char 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, status,2, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   902 ;;      Params:         0       0       0       0       0       0       0       0       0
   903 ;;      Locals:         1       0       0       0       0       0       0       0       0
   904 ;;      Temps:          1       0       0       0       0       0       0       0       0
   905 ;;      Totals:         2       0       0       0       0       0       0       0       0
   906 ;;Total ram usage:        2 bytes
   907 ;; Hardware stack levels used: 1
   908 ;; This function calls:
   909 ;;		Nothing
   910 ;; This function is called by:
   911 ;;		_Escreve_LCD
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           	psect	text5
   916   000970                     __ptext5:
   917                           	callstack 0
   918   000970                     _Escreve_C_LCD:
   919                           	callstack 29
   920                           
   921                           ;incstack = 0
   922                           ;Escreve_C_LCD@caracter stored from wreg
   923   000970  6E09               	movwf	Escreve_C_LCD@caracter^0,c
   924   000972                     
   925                           ;./lcd.h: 58:    PORTEbits.RE0 = 1;
   926   000972  8084               	bsf	132,0,c	;volatile
   927                           
   928                           ;./lcd.h: 61:    PORTEbits.RE1 = 0;
   929   000974  9284               	bcf	132,1,c	;volatile
   930   000976                     
   931                           ;./lcd.h: 62:    _delay((unsigned long)((5)*(4000000/4000.0)));
   932   000976  0E07               	movlw	7
   933   000978  6E08               	movwf	??_Escreve_C_LCD^0,c
   934   00097A  0E7D               	movlw	125
   935   00097C                     u117:
   936   00097C  2EE8               	decfsz	wreg,f,c
   937   00097E  D7FE               	bra	u117
   938   000980  2E08               	decfsz	??_Escreve_C_LCD^0,f,c
   939   000982  D7FC               	bra	u117
   940   000984  0000               	nop	
   941   000986                     
   942                           ;./lcd.h: 63:    PORTD = caracter;
   943   000986  C009  FF83         	movff	Escreve_C_LCD@caracter,3971	;volatile
   944   00098A                     
   945                           ;./lcd.h: 64:    PORTEbits.RE1 = 1;
   946   00098A  8284               	bsf	132,1,c	;volatile
   947   00098C                     
   948                           ;./lcd.h: 65:    _delay((unsigned long)((10)*(4000000/4000.0)));
   949   00098C  0E0D               	movlw	13
   950   00098E  6E08               	movwf	??_Escreve_C_LCD^0,c
   951   000990  0EFC               	movlw	252
   952   000992                     u127:
   953   000992  2EE8               	decfsz	wreg,f,c
   954   000994  D7FE               	bra	u127
   955   000996  2E08               	decfsz	??_Escreve_C_LCD^0,f,c
   956   000998  D7FC               	bra	u127
   957   00099A                     
   958                           ;./lcd.h: 66:    PORTEbits.RE1 = 0;
   959   00099A  9284               	bcf	132,1,c	;volatile
   960   00099C                     
   961                           ;./lcd.h: 67:    _delay((unsigned long)((10)*(4000000/4000.0)));
   962   00099C  0E0D               	movlw	13
   963   00099E  6E08               	movwf	??_Escreve_C_LCD^0,c
   964   0009A0  0EFC               	movlw	252
   965   0009A2                     u137:
   966   0009A2  2EE8               	decfsz	wreg,f,c
   967   0009A4  D7FE               	bra	u137
   968   0009A6  2E08               	decfsz	??_Escreve_C_LCD^0,f,c
   969   0009A8  D7FC               	bra	u137
   970   0009AA  0012               	return		;funcret
   971   0009AC                     __end_of_Escreve_C_LCD:
   972                           	callstack 0
   973                           
   974                           	psect	rparam
   975   000001                     ___rparam_used  equ	1
   976   000000                     ___param_bank   equ	0
   977   000000                     __Lparam        equ	__Lrparam
   978   000000                     __Hparam        equ	__Hrparam
   979                           
   980                           	psect	config
   981                           
   982                           ;Config register CONFIG1L @ 0x300000
   983                           ;	unspecified, using default values
   984                           ;	PLL Prescaler Selection bits
   985                           ;	PLLDIV = 0x0, unprogrammed default
   986                           ;	System Clock Postscaler Selection bits
   987                           ;	CPUDIV = 0x0, unprogrammed default
   988                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   989                           ;	USBDIV = 0x0, unprogrammed default
   990   300000                     	org	3145728
   991   300000  00                 	db	0
   992                           
   993                           ;Config register CONFIG1H @ 0x300001
   994                           ;	Oscillator Selection bits
   995                           ;	FOSC = HS, HS oscillator (HS)
   996                           ;	Fail-Safe Clock Monitor Enable bit
   997                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   998                           ;	Internal/External Oscillator Switchover bit
   999                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1000   300001                     	org	3145729
  1001   300001  0C                 	db	12
  1002                           
  1003                           ;Config register CONFIG2L @ 0x300002
  1004                           ;	Power-up Timer Enable bit
  1005                           ;	PWRT = ON, PWRT enabled
  1006                           ;	Brown-out Reset Enable bits
  1007                           ;	BOR = 0x3, unprogrammed default
  1008                           ;	Brown-out Reset Voltage bits
  1009                           ;	BORV = 0, Maximum setting 4.59V
  1010                           ;	USB Voltage Regulator Enable bit
  1011                           ;	VREGEN = 0x0, unprogrammed default
  1012   300002                     	org	3145730
  1013   300002  06                 	db	6
  1014                           
  1015                           ;Config register CONFIG2H @ 0x300003
  1016                           ;	Watchdog Timer Enable bit
  1017                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1018                           ;	Watchdog Timer Postscale Select bits
  1019                           ;	WDTPS = 128, 1:128
  1020   300003                     	org	3145731
  1021   300003  0E                 	db	14
  1022                           
  1023                           ; Padding undefined space
  1024   300004                     	org	3145732
  1025   300004  FF                 	db	255
  1026                           
  1027                           ;Config register CONFIG3H @ 0x300005
  1028                           ;	CCP2 MUX bit
  1029                           ;	CCP2MX = 0x1, unprogrammed default
  1030                           ;	PORTB A/D Enable bit
  1031                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1032                           ;	Low-Power Timer 1 Oscillator Enable bit
  1033                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1034                           ;	MCLR Pin Enable bit
  1035                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1036   300005                     	org	3145733
  1037   300005  81                 	db	129
  1038                           
  1039                           ;Config register CONFIG4L @ 0x300006
  1040                           ;	Stack Full/Underflow Reset Enable bit
  1041                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1042                           ;	Single-Supply ICSP Enable bit
  1043                           ;	LVP = OFF, Single-Supply ICSP disabled
  1044                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1045                           ;	ICPRT = 0x0, unprogrammed default
  1046                           ;	Extended Instruction Set Enable bit
  1047                           ;	XINST = 0x0, unprogrammed default
  1048                           ;	Background Debugger Enable bit
  1049                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  1050   300006                     	org	3145734
  1051   300006  80                 	db	128
  1052                           
  1053                           ; Padding undefined space
  1054   300007                     	org	3145735
  1055   300007  FF                 	db	255
  1056                           tosu	equ	0xFFF
  1057                           tosh	equ	0xFFE
  1058                           tosl	equ	0xFFD
  1059                           stkptr	equ	0xFFC
  1060                           pclatu	equ	0xFFB
  1061                           pclath	equ	0xFFA
  1062                           pcl	equ	0xFF9
  1063                           tblptru	equ	0xFF8
  1064                           tblptrh	equ	0xFF7
  1065                           tblptrl	equ	0xFF6
  1066                           tablat	equ	0xFF5
  1067                           prodh	equ	0xFF4
  1068                           prodl	equ	0xFF3
  1069                           indf0	equ	0xFEF
  1070                           postinc0	equ	0xFEE
  1071                           postdec0	equ	0xFED
  1072                           preinc0	equ	0xFEC
  1073                           plusw0	equ	0xFEB
  1074                           fsr0h	equ	0xFEA
  1075                           fsr0l	equ	0xFE9
  1076                           wreg	equ	0xFE8
  1077                           indf1	equ	0xFE7
  1078                           postinc1	equ	0xFE6
  1079                           postdec1	equ	0xFE5
  1080                           preinc1	equ	0xFE4
  1081                           plusw1	equ	0xFE3
  1082                           fsr1h	equ	0xFE2
  1083                           fsr1l	equ	0xFE1
  1084                           bsr	equ	0xFE0
  1085                           indf2	equ	0xFDF
  1086                           postinc2	equ	0xFDE
  1087                           postdec2	equ	0xFDD
  1088                           preinc2	equ	0xFDC
  1089                           plusw2	equ	0xFDB
  1090                           fsr2h	equ	0xFDA
  1091                           fsr2l	equ	0xFD9
  1092                           status	equ	0xFD8

Data Sizes:
    Strings     15
    Constant    0
    Data        7
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Escreve_LCD@caracter	PTR unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), STR_2(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_Posiciona_LCD
    _Posiciona_LCD->_Comando_LCD
    _Inicializa_LCD->_Comando_LCD
    _Escreve_LCD->_Escreve_C_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     306
                                              5 COMRAM     2     2      0
                        _Comando_LCD
                        _Escreve_LCD
                     _Inicializa_LCD
                      _Posiciona_LCD
 ---------------------------------------------------------------------------------
 (1) _Posiciona_LCD                                        3     2      1     184
                                              2 COMRAM     3     2      1
                        _Comando_LCD
 ---------------------------------------------------------------------------------
 (1) _Inicializa_LCD                                       2     2      0      45
                                              2 COMRAM     2     2      0
                        _Comando_LCD
 ---------------------------------------------------------------------------------
 (2) _Comando_LCD                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Escreve_LCD                                          2     1      1      62
                                              2 COMRAM     2     1      1
                      _Escreve_C_LCD
 ---------------------------------------------------------------------------------
 (2) _Escreve_C_LCD                                        2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_LCD
   _Escreve_LCD
     _Escreve_C_LCD
   _Inicializa_LCD
     _Comando_LCD
   _Posiciona_LCD
     _Comando_LCD

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            2047      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBIGSFRh         123      0       0      0.0%
BITCOMRAM           95      0       0      0.0%
COMRAM              95      7      14     14.7%
BITBIGSFRl          35      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      14      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Apr 29 10:55:41 2025

         ?_Escreve_C_LCD 0008                       l31 09AA                       l17 09D6  
                     l50 08D6                       l28 0880                       l37 096E  
                     l45 092C                       u30 092C                       u31 0928  
                     u40 087A                       u41 0876                       u50 096E  
                     u51 096A                       u67 08C4                       u77 090A  
                     u87 09BC                       u97 09CE                      l800 0914  
                    l730 09B4                      l740 0976                      l732 09B6  
                    l750 099C                      l742 0986                      l734 09C6  
                    l726 09AE                      l830 0826                      l744 098A  
                    l736 09C8                      l728 09B0                      l832 0830  
                    l840 086A                      l824 0814                      l746 098C  
                    l738 0972                      l850 0944                      l842 087A  
                    l834 083A                      l826 0816                      l748 099A  
                    l852 0952                      l844 092E                      l828 081C  
                    l860 0890                      l846 0932                      l790 08E8  
                    l782 08DA                      l838 0844                      l870 08BA  
                    l862 0896                      l854 0882                      l848 0942  
                    l792 08EA                      l784 08DC                      l872 08D0  
                    l864 08A0                      l856 0888                      l794 08F4  
                    l786 08E0                      l874 08D6                      l866 08A8  
                    l858 088C                      l796 0902                      l788 08E2  
                    l868 08B2                      l798 0904                      u107 094A  
                    u117 097C                      u127 0992                      u137 09A2  
                    wreg 0FE8            ??_Escreve_LCD 000B       Comando_LCD@comando 0009  
                   STR_1 0801                     STR_2 080A           _Inicializa_LCD 08DA  
      Inicializa_LCD@ini 0001                     _main 0882                     fsr2h 0FDA  
                   indf2 0FDF                     fsr1l 0FE1                     fsr2l 0FD9  
                   start 7FFC      __end_of_Comando_LCD 09D8             ___param_bank 0000  
                  ?_main 0008                    _PORTD 0F83                    _PORTE 0F84  
                  _TRISD 0F95                    _TRISE 0F96    Escreve_C_LCD@caracter 0009  
 __end_of_Inicializa_LCD 092E                    tablat 0FF5      __end_of_Escreve_LCD 0970  
                  status 0FD8      Escreve_LCD@caracter 000A          __initialization 09D8  
        ??_Escreve_C_LCD 0008             __end_of_main 08DA                   ??_main 000D  
          __activetblptr 0002          ?_Inicializa_LCD 0008                   _ADCON1 0FC1  
            _Comando_LCD 09AC                   isa$std 0001             __pdataCOMRAM 0001  
           __mediumconst 0800                   tblptrh 0FF7                   tblptrl 0FF6  
                 tblptru 0FF8              _Escreve_LCD 092E               __accesstop 0060  
__end_of__initialization 09F8            ___rparam_used 0001          Inicializa_LCD@x 000B  
         __pcstackCOMRAM 0008    __end_of_Posiciona_LCD 0882                  __Hparam 0000  
                __Lparam 0000             __psmallconst 0800                  __pcinit 09D8  
                __ramtop 0800                  __ptext0 0882                  __ptext1 0812  
                __ptext2 08DA                  __ptext3 09AC                  __ptext4 092E  
                __ptext5 0970         ??_Inicializa_LCD 000A             ?_Comando_LCD 0008  
   end_of_initialization 09F8            __Lmediumconst 0000                  postdec1 0FE5  
                postinc0 0FEE    __end_of_Escreve_C_LCD 09AC                _PORTEbits 0F84  
         Posiciona_LCD@x 000C             ?_Escreve_LCD 000A            __pidataCOMRAM 0A02  
    start_initialization 09D8              __smallconst 0800            _Posiciona_LCD 0812  
              copy_data0 09EC                 __Hrparam 0000                 __Lrparam 0000  
         ?_Posiciona_LCD 000A                 isa$xinst 0000          ??_Posiciona_LCD 000B  
          _Escreve_C_LCD 0970            ??_Comando_LCD 0008      Posiciona_LCD@coluna 000A  
     Posiciona_LCD@linha 000B  
